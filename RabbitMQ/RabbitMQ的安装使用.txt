

先安装erlang(rabbitmq，发现是用erlang写的)：
gswewf@gswewf-pc:~$ sudo apt-get install erlang-nox

安装rabbitmq
gswewf@gswewf-pc:~$ sudo apt-get install rabbitmq-server

# 查找安装目录：
gswewf@gswewf-pc:~$ sudo find / -name rabbitmq

# 查看日志信息：
gswewf@gswewf-pc:/var/log/rabbitmq$ less startup_log 

# 使用rabbitmqctl控制台命令（位于/usr/lib/rabbitmq/bin>）来创建vhost
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo rabbitmqctl add_vhost gswewf_mq
Creating vhost "gswewf_mq" ...

# 添加用户和密码(用户名：gswewf, 密码：123456)
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo rabbitmqctl add_user gswewf 123456
Creating user "gswewf" ...

# 给声明了的vhost，给它分配访问权限。
# 用户名为gswewf的用户就可以访问vitrual host为gswewf_mq的资源了，并且具备读写的权限。
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo rabbitmqctl set_permissions -p gswewf_mq gswewf ".*" ".*" ".*"
Setting permissions for user "gswewf" in vhost "gswewf_mq" ...

# 安装python的pika
gswewf@gswewf-pc:~$ sudo pip3 install pika

# 查询状态：
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ ./rabbitmqctl status
Status of node 'rabbit@gswewf-pc' ...
Error: unable to connect to node 'rabbit@gswewf-pc': nodedown

# 编辑配置文件，取消三行注释
root@gswewf-pc:~# vim /etc/rabbitmq/rabbitmq-env.conf
NODENAME=rabbit
NODE_IP_ADDRESS=127.0.0.1
NODE_PORT=5672

# kill 掉之前的rabbitmq, 重启服务：
root@gswewf-pc:/usr/lib/rabbitmq/bin# ./rabbitmq-server restart

# 启用web管理插件
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo rabbitmq-plugins enable rabbitmq_management

# 也可以直接编辑文件/etc/rabbitmq/enabled_plugins
root@gswewf-pc:~# vim /etc/rabbitmq/enabled_plugins
[rabbitmq_management, rabbitmq_visualiser].

# 查看安装插件列表
root@gswewf-pc:/usr/lib/rabbitmq/bin# ./rabbitmq-plugins list

# kill 再启动
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo ./rabbitmq-server start

# 登陆web界面：
浏览器中输入：http://127.0.0.1:15672/
默认登录名和密码都是guest

如果新加了用户不进去去是因为没有给权限，执行如下权限就行了

./rabbitmqctl set_user_tags newuser administrator



更多使用示例：http://blog.csdn.net/chenjiebin/article/details/8253433

import pika
connection = pika.BlockingConnection()
channel = connection.channel()
channel.basic_publish(exchange='example',
                      routing_key='test',
                      body='Test Message')
connection.close()
And an example of writing a blocking consumer:

import pika
connection = pika.BlockingConnection()
channel = connection.channel()

for method_frame, properties, body in channel.consume('test'):

    # Display the message parts and ack the message
    print(method_frame, properties, body)
    channel.basic_ack(method_frame.delivery_tag)

    # Escape out of the loop after 10 messages
    if method_frame.delivery_tag == 10:
        break

# Cancel the consumer and return any pending messages
requeued_messages = channel.cancel()
print('Requeued %i messages' % requeued_messages)
connection.close()

# http://mac-blog.org.ua/rabbitmq-python-example/
# http://blog.csdn.net/chenjiebin/article/details/8253433
# http://www.rabbitmq.com/tutorials/tutorial-one-python.html

# 删除所有的队列
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo ./rabbitmqctl stop_app
[sudo] gswewf 的密码：
Stopping node 'rabbit@gswewf-pc' ...
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo ./rabbitmqctl reset 
Resetting node 'rabbit@gswewf-pc' ...
gswewf@gswewf-pc:/usr/lib/rabbitmq/bin$ sudo ./rabbitmqctl start_app
Starting node 'rabbit@gswewf-pc' ...

