
sed 's/要被替换的字符串/新的字符串/g'
$ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。
如果没有g标记，则只有每行第一个匹配的test被替换成mytest。

sed -i 's/被替换的内容/要替换成的内容/' file        -i 直接修改并保存

sed 's/ruby/bird/g'    #替换ruby为bird

用sed替换xml文件中的变量。一般在sed 中替换都用单引号，如下边

sed -i ‘s/10/1000/g’ test.xml
但是如果需要把1000改成变量，如
sed -i ’s/10/$num/g‘ test.xml
这样就不成功。

此时需要把单引号改成双引号,并把分隔符/替换成#就可以,如下边例子
$num=1000
sed -i "s#10#$num#g" test.xml

sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作，下面先了解一下sed的用法
sed命令行格式为：
         sed [-nefri] ‘command’ 输入文本        

常用选项：
        -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
        -e∶直接在指令列模式上进行 sed 的动作编辑；
        -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；
        -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)
        -i∶直接修改读取的档案内容，而不是由萤幕输出。       

常用命令：
        a   ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
        c   ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
        d   ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
         i   ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
         p  ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～
         s  ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！

举例：（假设我们有一文件名为ab）
     删除某行(但源文件不会有修改)
     [root@localhost ruby] # sed '1d' ab              #删除第一行 
     [root@localhost ruby] # sed '$d' ab              #删除最后一行
     [root@localhost ruby] # sed '1,2d' ab           #删除第一行到第二行
     [root@localhost ruby] # sed '2,$d' ab           #删除第二行到最后一行

　　显示某行
.    [root@localhost ruby] # sed -n '1p' ab           #显示第一行 
     [root@localhost ruby] # sed -n '$p' ab           #显示最后一行
     [root@localhost ruby] # sed -n '1,2p' ab        #显示第一行到第二行
     [root@localhost ruby] # sed -n '2,$p' ab        #显示第二行到最后一行

　　使用模式进行查询
     [root@localhost ruby] # sed -n '/ruby/p' ab    #查询包括关键字ruby所在所有行
     [root@localhost ruby] # sed -n '/\$/p' ab        #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义

　　增加一行或多行字符串
     [root@localhost ruby]# cat ab
     Hello!
     ruby is me,welcome to my blog.
     end
     [root@localhost ruby] # sed '1a drink tea' ab  #第一行后增加字符串"drink tea"
     Hello!
     drink tea
     ruby is me,welcome to my blog. 
     end
     [root@localhost ruby] # sed '1,3a drink tea' ab #第一行到第三行后增加字符串"drink tea"
     Hello!
     drink tea
     ruby is me,welcome to my blog.
     drink tea
     end
     drink tea
     [root@localhost ruby] # sed '1a drink tea\nor coffee' ab   #第一行后增加多行，使用换行符\n
     Hello!
     drink tea
     or coffee
     ruby is me,welcome to my blog.
     end

　　代替一行或多行
     [root@localhost ruby] # sed '1c Hi' ab                #第一行代替为Hi
     Hi
     ruby is me,welcome to my blog.
     end
     [root@localhost ruby] # sed '1,2c Hi' ab             #第一行到第二行代替为Hi
     Hi
     end

　　替换一行中的某部分
　　格式：sed 's/要替换的字符串/新的字符串/g'   （要替换的字符串可以用正则表达式）
     [root@localhost ruby] # sed -n '/ruby/p' ab | sed 's/ruby/bird/g'    #替换ruby为bird
　  [root@localhost ruby] # sed -n '/ruby/p' ab | sed 's/ruby//g'        #删除ruby

     插入
     [root@localhost ruby] # sed -i '$a bye' ab         #在文件ab中最后一行直接输入"bye"
     [root@localhost ruby]# cat ab
     Hello!
     ruby is me,welcome to my blog.
     end
     bye


1、在文件的首行插入指定内容：
:~$ sed -i "1i#! /bin/sh -" a 
执行后，在a文件的第一行插入#! /bin/sh -

2、在文件的指定行（n）插入指定内容：
:~$ sed -i "niecho "haha"" a 
执行后，在a文件的第n行插入echo "haha"

对文件批量重命名：
 for i in `ls`; do mv -f $i `echo $i | sed 's/test/mytest/g'`; done
或者写个脚本，显得更加清晰：
for file in `ls`
do
    newfile =`echo $i | sed 's/test/mytest/g'`
    mv $file $newfile
done

# 显示文件第9行的内容：
sed -n '9p' train.txt

# 显示文件第9~12行的内容：
sed -n '9,12p' train.txt

sed '/pattern/!p' infile //匹配pattern的行不输出 
sed -n '1,2p' infile //输出文件第1～2行的内容
sed -n '2,$p' file //输出文件第2行到文件末尾的内容

打印文本： p 
输出test.txt的第5-7行：sed -n '5,7p' test.txt 

输出文件第99行的内容：
sed -n '99,p' test.txt。但sed在print后并不会立即退出，还会继续搜索文件直到文件末尾，当文件较大的时候使用sed的效率会比较低。
可以做如下优化：sed -n '99,p;100q' test.txt，打印完之后在100行退出。

