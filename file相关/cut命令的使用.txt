
cut 命令是用来从文本文件中移除“某些列”的经典工具。

当处理使用分隔符隔开的文本文件格式时，你可以向带有 -f 选项的 cut 命令提供需要保留的域的范围，并且你也可以使用 -d 选项来指定分隔符（当没有使用 -d 选项时，默认以 tab 字符来作为分隔符）：
cut -f 5- -d';' BALANCE.csv | head
# 输出`;`分割文件，第5列及其之后的所有列。

# 改变输出的分隔符
cut 允许通过使用 --output-delimiter 选项来为结果指定一个不同的域分隔符：
sh$ cut -f 5,6- -d';' --output-delimiter="*" BALANCE.csv | head
需要注意的是，在上面这个例子中，所有出现域分隔符的地方都被替换掉了，而不仅仅是那些在命令行中指定的作为域范围边界的分隔符。


# 只保留第 5 个域
sh$ cut -f 5 -d';' BALANCE.csv |head -3

# 保留除了第 5 个域之外的内容
sh$ cut --complement -f 5 -d';' BALANCE.csv |head -3



当启用 -c 命令行选项时，cut 命令将移除一系列字节（不能很好地处理多字节字符，换句话说，可以很好的处理us-ascii格式的文件，但不能很好地处理utf-8格式的文件）。
cut 命令实际上需要你指出你想保留的数据范围，而不是你想移除的范围。

cut -c 25-59 BALANCE.txt | head
保留文件`BALANCE.txt`第25到59个字符(使用字节位置来表示范围的，这里是指字节位置，而不是字符位置)所在列；

对于 cut 命令来说，范围是由连字符(-)分隔的起始和结束位置组成，范围是基于 1 计数的，即每行的第一项是从 1 开始计数的，而不是从 0 开始。
范围是一个闭区间，开始和结束位置都将包含在结果之中，正如它们之间的所有字符那样。
如果范围中的结束位置比起始位置小，则这种表达式是错误的。作为快捷方式，你可以省略起始或结束值，正如下面的表格所示：

范围    含义
a-b a 和 b 之间的范围（闭区间）
a   与范围 a-a 等价
-b  与范围 1-a 等价
b-  与范围 b-∞ 等价
cut 命令允许你通过逗号分隔多个范围，下面是一些示例：

# 保留 1 到 24 之间（闭区间）的字符
cut -c -24 BALANCE.txt
# 保留 1 到 24（闭区间）以及 36 到 59（闭区间）之间的字符
cut -c -24,36-59 BALANCE.txt
# 保留 1 到 24（闭区间）、36 到 59（闭区间）和 93 到该行末尾之间的字符
cut -c -24,36-59,93- BALANCE.txt
cut 命令的一个限制（或者是特性，取决于你如何看待它）是它将 不会对数据进行重排。所以下面的命令和先前的命令将产生相同的结果，尽管范围的顺序做了改变：

cut -c 93-,-24,36-59 BALANCE.txt  
效果等价于：
cut -c -24,36-59,93- BALANCE.txt




