

# 显示与之前某次commit有哪些不同的文件：
gswewf@gswewf-pc:~/qa_jar$ git diff 6c0311a8da6d848e04c40446ea25386824d37b7b --stat
 conf/pub_default.py   |  5 +++++
 jar/models/dict.txt   | 24 +++++++-----------------
 tornado_jar_server.py |  3 ++-
 3 files changed, 14 insertions(+), 18 deletions(-)

# 查看某个文件的历史：
1. git log filename
可以看到fileName相关的commit记录
2. git log -p filename
可以显示每次提交的diff
3. 只看某次提交中的某个文件变化，可以直接加上fileName
git show commit-id filename
4.根据commit-id查看某个提交
git show -s --pretty=raw ca53e82

# 使用的命令git add file1 是把文件从工作区提交到暂存区，git commit -m "prompty" file1 是把文件从暂存区提交到了版本库
  git diff 比较的是工作区和暂存区的差别
  git diff --cached 比较的是暂存区和版本库的差别
  git diff HEAD 可以查看工作区和版本库的差别(HEAD代表的是本地最近的一次commit)

使用git diff时如何忽略某些文件
    第一步：自定义diff驱动器
    （见其中diff.driver.command的说明http://git-scm.com/docs/git-config），意思是说git-diff的时候可以指定一个命令去跑，而不是跑内置的。有了这个配置支持，我们就可以设置如下nodiff的指令（在项目根路径）：

    git config diff.nodiff.command /usr/bin/true
    或：
    git config diff.nodiff.command /bin/true

    可以通过`whereis true`查看下true命令在哪里；
    gswyhq@gswyhq-PC:~/yhb$ whereis true
    true: /bin/true /usr/share/man/man1/true.1.gz

    这个指令干嘛呢？这个指令什么都不干，直接返回true（/usr/bin/true），这样就有了类似跳过的效果。

    第二步：设置git attributes
    我们利用这个特性在项目根目录中，创建一个.gitattributes文件，并添加如下配置：

    build.css diff=nodiff
    build.js  diff=nodiff
    好了现在我们就可以连起来理解了，当我们运行git diff命令的时候，git就会读取.gitattributes的配置，然后发现遇到build.css和build.js文件的时候，需要执行nodiff指令，而nodiff指令被我们此前配置成了/usr/bin/true直接返回true，于是，就直接“跳过”了。

    这里文件路径的配置和.gitignore是一样的，支持目录，文件，通配符之类的，可以轻松实现忽略一批文件或者整个目录。

比如我们有 2 个分支：master, dev，现在想查看这两个 branch 的区别，有以下几种方式：

1.查看 dev 有，而 master 中没有的：
git log dev ^master 

同理查看 master 中有，而 dev 中没有的内容：
git log master ^dev

2.查看 dev 中比 master 中多提交了哪些内容：
git log master..dev

注意，列出来的是两个点后边（此处即dev）多提交的内容。同理，想知道 master 比 dev 多提交了什么：
git log dev..master

3.不知道谁提交的多谁提交的少，单纯想知道有什么不一样：
git log dev...master

4.在上述情况下，再显示出每个提交是在哪个分支上：
git log --left-right dev...master
注意 commit 后面的箭头，根据我们在 –left-right dev…master 的顺序，左箭头 < 表示是 dev 的，右箭头 > 表示是 master的。

5.查看某一个commit详情：
   git show commit_id


