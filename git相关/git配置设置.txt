git config --global log.date iso8601
git config --global core.quotepath false
git config --global credential.helper store

git config是用于进行一些配置设置，有三种不同的方式来指定这些配置适用的范围：
1) git config   针对一个git仓库
2) git config --global    针对一个用户
3) sudo git config --system    针对一个系统，因为是针对整个系统的，所以必须使用sudo

1) 第一种默认当前目录是一个git仓库，假设我们有一个仓库叫hello-world，它所修改配置保存在hello-world/.git/config
gswewf@gswewf-pc:~/hello-world$ less .git/config
[core]
        repositoryformatversion = 0
        filemode = true
        bare = true
        logallrefupdates = true

如果我们想修改bare为false，最简单的办法就是直接用vim打开hello-world/.git/config文件进行修改，
另一种办法就是使用git config来修改:
gswewf@gswewf-pc:~/hello-world$ git config core.bare false

2) 第2种是适用于当前用户，也就是说只要是这个用户操作任何git仓库，那么这个配置都会生效，这种配置保存在~/.gitconfig当中
gswewf@gswewf-pc:~$ less .gitconfig 
[user]
        email = gswewf@126.com
        name = gswewf

同样可以直接编辑，也可以命令行设置
$git config --global user.name "I Love You"
$git config --global user.email "i.love.you@gmail.com"

3) 第3种是适用于一个系统中所有的用户，也就是说这里的配置对所有用户都生效，保存在‘/etc/gitconfig’中；
如将vim设置为所有用户默认使用的编辑器，我们来看设置的过程
$sudo git config --system core.editor vim

如果一个配置出即出现在/etc/gitconfig，~/.gitconfig以及hello-world/.git/config这三个位置时，
我们又恰巧要操作git仓库hello-world，那么生效的优先级顺序是：
(1)git_test/.git/config，(2)~/.gitconfig，(3)/etc/gitconfig，也就是说如果同一个配置同时出现在三个文件中时，(1)有效。

# 中文文件名显示乱码，可以通过以下方法来解决：
gswewf@gswewf-pc:~/biji$ git config --global core.quotepath false

修改git log默认的时间显示方式:
默认的显示时间格式是这样：
commit 4cd50b7aacdb4b3d704ac91f589392a3eeecff80
Author: web1 <web1@web1.co>
Date:   Sat Jul 22 14:22:38 2017 +0800
修改默认的时间格式：
gswewf@gswewf-pc:~/yhb20170717$ git config --global log.date iso8601
commit 4cd50b7aacdb4b3d704ac91f589392a3eeecff80
Author: web1 <web1@web1.co>
Date:   2017-07-22 14:22:38 +0800
改回默认格式的命令：
gswewf@gswewf-pc:~/yhb20170717$ git config log.date default 
# 有时候改了日期格式，但还是无效，可能是之前设置了本项目的日期格式，这时可以：
ubuntu@ip-172-33-8-214:~/dingdang$ git config --global log.date iso8601
改为： 
ubuntu@ip-172-33-8-214:~/dingdang$ git config log.date iso8601

查看配置信息
要检查已有的配置信息，可以使用 git config --list 命令：
gswewf@gswewf-pc:~/hello-world$ git config --list 
core.quotepath=false
user.email=gswewfyang@web1.co
user.name=gswewfyang
alias.gswewf=commit --author='gswewf <gswewf@126.com>' -m '增加记录' 
merge.ours.driver=true
http.postbuffer=524288000
log.date=iso8601
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
user.email=gswewf@126.com
user.name=gswewf
remote.origin.url=https://github.com/gswewf/hello-world.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master

有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。

# 防止每次都需要输入密码，可进行如下设置：
git config --global credential.helper store
这样，第一次正确输入密码之后，就不用每次都输入了；store 将凭据保存在磁盘上.

上传项目到GitHub上，当某个文件大小超过100M时，就会上传失败，因为默认的限制了上传文件大小不能超过100M。如果需要上传超过100M的文件，就需要我们自己去修改配置。
首先，打开终端，进入项目所在的文件夹；
输入命令：git config http.postBuffer 524288000
之前git中的配置是没有这一项的,执行完以上语句后输入git config -l可以看到配置项的最下面多出了一行我们刚刚配置的内容. (52428000=500×1024×1024,即500M)

使用ssh-keygen 命令更改SSH Key 密码
-p 选项请求修改私钥的密码，而不是创建一个新的私钥。程序会提示你输入原始密码。然后输入两遍新密码。
-f{filename} 选项去指定密钥的名称。
详细过程如下：
gswewf@gswewf-PC:~$ cd .ssh/
gswewf@gswewf-PC:~/.ssh$ ls
config  id_rsa  id_rsa.pub  known_hosts
gswewf@gswewf-PC:~/.ssh$ ssh-keygen -p -f id_rsa
Enter old passphrase:
Enter new passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved with the new passphrase.

