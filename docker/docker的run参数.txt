
gswewf@gswewf-pc:~$ sudo docker run   --detach  --name=neo4j17474 --publish=17474:7474 --publish=17687:7687    --volume=$HOME/neo4j/data:/data  --volume=$HOME/neo4j/logs:/logs  --volume=$HOME/neo4j/conf:/conf  neo4j:3.2

通过镜像名为`neo4j`,tag为`3.2`的镜像，启动一个容器

--name：命名容器的名字
若启动容器时候没有命名，则会随机生成一个名字，通过`sudo docker ps -a`可以查询到`NAMES`；再通过`docker rename`重命名；
如，通过`sudo docker rename cocky_cori nwd7474`，将容器名`cocky_cori`的容器，重命名为`nwd7474`；

--detach：后台模式启动
或者--detach=true或者-d=true或者-d，那么容器将会运行在后台模式。
此时所有I/O数据只能通过网络资源或者共享卷组来进行交互。因为容器不再监听你执行docker run的这个终端命令行窗口。
但你可以通过执行docker attach来重新附着到该容器的回话中。需要注意的是，容器运行在后台模式下，是不能使用--rm选项的。
在前台模式下（不指定-d参数即可），Docker会在容器中启动进程，同时将当前的命令行窗口附着到容器的标准输入、标准输出和标准错误中。

--publish：将容器内的端口暴露给主机，并创建映射规则，比如 -p ip:hostPort:containerPort 
必须指定containerPort，若没有hostPort，docker会自动分配端口；
或者-p

--expose: 运行时暴露端口，但并不创建和宿主机间的映射
所有发布（-p或者-P）的端口都暴露了，但是并不是所有暴露（EXPOSE或--expose）的端口都会发布。

--volume: 给容器挂载存储卷，挂载到容器的某个目录 
挂载某个目录后，在宿主机上对应的目录名，若有更改，则容器在下次重启后，数据将丢失；并且可能重新生成一个对应的空目录

-P, --publish-all=false    随机指定容器暴露的端口    
当使用-P时，Docker会在主机中随机从49153 和65535之间查找一个未被占用的端口绑定到容器。
你可以使用`docker port 容器名`来查找这个随机绑定端口。并且每重启一次这个容器，都会随机生成一个新的port；
gswewf@gswewf-pc:~$ sudo docker run -P redis
gswewf@gswewf-pc:~$ sudo docker port 6cfa9da94df2
6379/tcp -> 0.0.0.0:32770

-i, --interactive=false   打开STDIN，用于控制台交互    
-t, --tty=false            分配tty设备，该可以支持终端登录，默认为false  
如果要进行交互式操作（例如Shell脚本），那我们必须使用-i -t参数同容器进行数据交互。
但是当通过管道同容器进行交互时，就不需要使用-t参数，例如下面的命令：
echo test | docker run -i busybox cat
因为要作一个最小的系统，又要实现一个linux系统的基本功能。因此选定busybox来实现这个系统。（busybox是静态编译，没有任何依赖，无需系统库及第三方库，且1.21.1版本的busybox只有951K）。

–restart(自动重启)：默认情况下容器是不重启的，–restart标志会检查容器的退出码来决定容器是否重启容器。 
docker run --restart=always --name docker_restart -d centos /bin/sh -c "while true;do echo hello world; sleep;done":
--restart=always:不管容器的返回码是什么，都会重启容器。
--restart=on-failure:5:当容器的返回值是非0时才会重启容器。5是可选的重启次数。

# 向已经运行的容器添加重启策略：
docker update --restart=always <CONTAINER ID>
# 或者更新之前的重启策略：
gswewf@gswewf-pc:~$ docker update --restart=no yhb0717_yhb_1 yhb0717_docker-neo4j_1 yhb0717_docker-redis_1 qbzz17474 

# 可以通过查询对应的run参数：
gswewf@gswewf-pc:~$ docker inspect e7185e2bb696
        "HostConfig": {
            "RestartPolicy": {
                "Name": "always",  # 重启策略
                "MaximumRetryCount": 0
            },

# 除了通过`docker update`修改run参数外，也可以通过，使用 service docker stop 命令先关掉docker的引擎。然后修改刚才的参数后再重启。具体操作：
依据里面文件保存的路径:
/var/lib/docker/Container/容器ID，在目录下的hostconfig.json文件中，参数"RestartPolicy":{"Name":"always","MaximumRetryCount":0}，
修改了这个参数`always`为`no`。
用 service docker restart 命令重启了我的docker引擎。
root@gswewf-pc:/var/lib/docker/containers/8845ad7492c1a06fe4dc24aca984a00dbd2bfbc3454c74702055a64c9d42fa1a# vim hostconfig.json 

操作人员可以通过-e来设定任意的环境变量，甚至覆盖已经存在的环境变量，或者是在Dockerfile中通过ENV设定的环境变量。
docker run -e LANG=C.UTF-8 unbuntu /bin/bash

USER
容器中默认的用户是root，但是开发人员创建新的用户之后，这些新用户也是可以使用的。开发人员可以通过Dockerfile的USER设定默认的用户，并通过"-u "来覆盖这些参数。
当使用的是使用USER命令构建的docker镜像来使用非root. 在容器内部，我是“dev”，但是我想编辑/etc/hosts文件。 所以我需要成为root。 我正在尝试su命令，但我被要求输入root密码。
当使用-u选项时，可以使用root用户（ID = 0）而不是提供的默认用户登录到Docker Image。 例如:
docker exec -u 0 -it container_name bash
root（id = 0）是容器内的默认用户。 镜像开发人员可以创建额外的用户。 这些用户可以通过名称访问。 传递数字标识时，用户不必在容器中存在。

WORKDIR
容器中默认的工作目录是根目录（/）。开发人员可以通过Dockerfile的WORKDIR来设定默认工作目录，操作人员可以通过"-w"来覆盖默认的工作目录。

net
网络模式，可以在docker客户端的--net参数中指定这些值
    net: "bridge"
    net: "none"
    net: "container:[name or id]"
    net: "host"
net,若是在docker-compose.yml文件中，则需要如下定义：
    network_mode:
      "host"

privileged参数:
使用该参数，container内的root拥有真正的root权限。
否则，container内的root只是外部的一个普通用户权限。


