
启动一个容器，什么-p -P --expose都不指定。 就用busybox吧，很小。起了以后就是一个bash等在那儿。
gswewf@gswewf-pc:~$ sudo docker run -it busybox
Unable to find image 'busybox:latest' locally
latest: Pulling from library/busybox
27144aa8f1b9: Pull complete 
Digest: sha256:be3c11fdba7cfe299214e46edc642e09514dbb9bbefcd0d3836c05a1e0cd0642
Status: Downloaded newer image for busybox:latest
/ # ifconfig eth0 |grep 'inet addr:'
          inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
/ # nc -ll -p 7777 -e date

# 以上意思，是通过镜像`busybox`创建一个容器，查询容器内部的ip地址是：`172.17.0.3`；
并在容器里执行一个netcat侦听端口7777。 一旦得到连接就发送date命令的结果给对方。

# 当然，也可以通过容器号，查询容器的iP：
gswewf@gswewf-pc:~$ sudo docker inspect 5709caedb0b8 |grep IPA
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.3",
                    "IPAMConfig": null,
                    "IPAddress": "172.17.0.3",
# 在别的容器里，连接`5709caedb0b8`容器的7777端口：
gswewf@gswewf-pc:~$ docker run busybox nc 172.17.0.3 7777
Sat Jun 24 07:49:32 UTC 2017

# 在容器内若要访问宿主机，通过‘127.0.0.1’、‘localhost’肯定是不行的，这个时候，他们指的容器自身；
# 可以通过宿主机的ip进行访问：
# 在容器外获取宿主机的ip
gswewf@gswewf-pc:~/docker/redis$ ifconfig 
wlp9s0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.104  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::7081:a93d:5a44:8c3e  prefixlen 64  scopeid 0x20<link>
        ether 74:e5:0b:86:a2:e8  txqueuelen 1000  (Ethernet)
        RX packets 683182  bytes 879923683 (839.1 MiB)
# 并且宿主机允许其他的机器通过ip访问
# 如防火墙允许：
gswewf@gswewf-pc:~/yhb$ sudo ufw allow from 172.17.0.0/12
[sudo] gswewf 的密码：
WARN: Rule changed after normalization
Rule added
# 重启ufw使新规则生效
gswewf@gswewf-pc:~/yhb$ sudo ufw reload

# 数据库层面的允许，如mysql数据库允许其他的机器访问：
GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.17.%' IDENTIFIED BY '123456' WITH GRANT OPTION;
# 使修改生效：
FLUSH   PRIVILEGES;

# 在容器内访问宿主机：
root@527284633c1d:/yhb# python3
>>> import redis
>>> rc = redis.StrictRedis(host='192.168.1.104', port=6379, db=0)
>>> rc.get('foo')
b'10'

# 宿主机访问容器：
1、通过宿主机的ip不能访问，但通过容器的ip却能访问：
# 通过宿主机ip不能访问：
gswewf@gswewf-pc:~/yhb$ curl http://192.168.1.104:8000/ -d '{"question": "a卡在哪里能用", "uid": "123456"}'
curl: (7) Failed to connect to 192.168.1.104 port 8000: 拒绝连接
# 在宿主机上，通过容器的ip却能访问
gswewf@gswewf-pc:~/yhb$ curl http://172.17.0.2:8000/ -d '{"question": "a卡在哪里能用", "uid": "123456"}'
这需要在利用镜像生成容器时，指定`-p`参数，将容器内的端口映射到容器外，如：
gswewf@gswewf-pc:~/docker/ubuntu$ docker run -it --name=ubuntu-yhb -v /home/gswewf/yhb:/yhb -p 8000:8000 -w /yhb ubuntu:0701 /bin/bash
也可以映射主机的IP地址(缺失主机的ip地址时，默认是`0.0.0.0`，可以远程访问)的指定端口到虚拟机的指定端口：
# 只能本地访问(通过`127.0.0.1`、`localhost`能访问，但通过主机ip`192.168.1.104`却不能访问)：
gswewf@gswewf-pc:~/docker/ubuntu$ docker run -it --name=ubuntu-yhb -v /home/gswewf/yhb:/yhb -p 127.0.0.1:8000:8000 -w /yhb ubuntu:0701 /bin/bash
# 只能通过主机ip访问（通过`127.0.0.1`、`localhost`不能访问）：
gswewf@gswewf-pc:~/docker/ubuntu$ docker run -it --name=ubuntu-yhb -v /home/gswewf/yhb:/yhb -p 192.168.1.104:8000:8000 -w /yhb ubuntu:0701 /bin/bash

# 查看某个容器的映射端口：
gswewf@gswewf-pc:~/yhb$ docker port ubuntu-yhb

# 容器内部查看容器的id:
/chat_bot # hostname 
4d9c42808f46


