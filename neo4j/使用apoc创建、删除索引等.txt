
# 索引使用帮助：
call apoc.help("apoc.index")

# 查看现有的索引：
call apoc.index.list()

╒══════╤════════════════════════════════════════╤══════════════════════════════════════════════════════════════╕
│"type"│"name"                                  │"config"                                                      │
╞══════╪════════════════════════════════════════╪══════════════════════════════════════════════════════════════╡
│"NODE"│"Zhiye"                                 │{"type":"fulltext","to_lower_case":"true","provider":"lucene"}│
├──────┼────────────────────────────────────────┼──────────────────────────────────────────────────────────────┤
│"NODE"│"Shuiyanxingyanglaonianjinbaoxianb2kuan"│{"type":"fulltext","to_lower_case":"true","provider":"lucene"}│
├──────┼────────────────────────────────────────┼──────────────────────────────────────────────────────────────┤
│"NODE"│"Yaopin"                                │{"type":"fulltext","to_lower_case":"true","provider":"lucene"}│
└──────┴────────────────────────────────────────┴──────────────────────────────────────────────────────────────┘

# 要在节点属性上创建手动索引，请使用节点调用apoc.index.addNode，并提供要编制索引的属性。
MATCH (n)
CALL apoc.index.addNode(n,['name','alias'])
RETURN count(*)

使用创建的手动索引进行搜索：
profile call apoc.index.search( 'Tongyonggraph', 'name:太平洋' ) yield node with node as n match (n) -[r:`面积`]->(n1) return n,n1;
runtime: INTERPRETED. 3 total db hits in 32 ms.
手动索引创建后，下面的搜索效率并没有提升：
profile MATCH (n:Tongyonggraph) -[r:`面积`]->(n1) where n.name='太平洋' return n,n1;
runtime: INTERPRETED. 24260033 total db hits in 17430 ms.

# 亿级数据，创建手动索引报错,内存不足的错误（重新设置了dbms.memory.heap.initial_size、dbms.memory.heap.max_size也无用）：
neo4j> match (p:Tongyonggraph)-->() call apoc.index.addNode(p,["name"]) RETURN count(*);
Failed to invoke procedure `apoc.index.addNode`: Caused by: java.lang.OutOfMemoryError: Java heap space
解决方案，改成批次操作即可：
neo4j> CALL apoc.periodic.iterate('match (p:Tongyonggraph)-->() return p','call apoc.index.addNode(p,["name"]) RETURN count(*)', {batch:10000, iterateList:true, parallel:true});

# 删除某个索引：
CALL apoc.index.remove('Zhiye')
╒══════╤═══════╤══════════════════════════════════════════════════════════════╕
│"type"│"name" │"config"                                                      │
╞══════╪═══════╪══════════════════════════════════════════════════════════════╡
│"NODE"│"Zhiye"│{"type":"fulltext","to_lower_case":"true","provider":"lucene"}│
└──────┴───────┴──────────────────────────────────────────────────────────────┘

# 批量删除所有的索引：
call apoc.index.list() yield name as label 
with label 
CALL apoc.index.remove(label) yield name
return true

