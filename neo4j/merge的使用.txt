
MERGE ON MATCH
# 若name="Charlie Sheen", 不存在，则执行 name="Charlie Sheen",不执行age=10
# 若name="Charlie Sheen", 存在，则不执行 name="Charlie Sheen", 执行age=10
MERGE (p:Person {name:"Charlie Sheen"})
ON match SET p.age=10 return p

MERGE ON CREATE
# 若name="Charlie Sheen", 不存在，则执行 name="Charlie Sheen",执行age=10
# 若name="Charlie Sheen", 存在，则不执行 name="Charlie Sheen", 不执行age=10
MERGE (p:Person {name:"Charlie Sheen"})
ON CREATE SET p.age=10 return p

# MERGE SET
MERGE (n:Label {id:28012}) SET n.name = 'Alices', n.age = 154 return n
若有id为28012，则更改其属性name、age；若没有id为28012的节点则创建该节点，并更改其属性name、age；

Merge子句

Merge子句的作用有两个：当模式（Pattern）存在时，匹配该模式；当模式不存在时，创建新的模式，功能是match子句和create的组合。在merge子句之后，可以显式指定on creae和on match子句，用于修改绑定的节点或关系的属性。

通过merge子句，你可以指定图形中必须存在一个节点，该节点必须具有特定的标签，属性等，如果不存在，那么merge子句将创建相应的节点。

1，通过merge子句匹配搜索模式

匹配模式是：一个节点有Person标签，并且具有name属性；如果数据库不存在该模式，那么创建新的节点；如果存在该模式，那么绑定该节点；

MERGE (michael:Person { name: 'Michael Douglas' })
RETURN michael;
2，在merge子句中指定on create子句

如果需要创建节点，那么执行on create子句，修改节点的属性；

ERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
RETURN keanu.name, keanu.created
3，在merge子句中指定on match子句

如果节点已经存在于数据库中，那么执行on match子句，修改节点的属性；

MERGE (person:Person)
ON MATCH SET person.found = TRUE , person.lastAccessed = timestamp()
RETURN person.name, person.found, person.lastAccessed

4，在merge子句中同时指定on create 和 on match子句
# 如果找到就设置属性，没找到创建节点并设置属性：
MERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
ON MATCH SET keanu.lastSeen = timestamp()
RETURN keanu.name, keanu.created, keanu.lastSeen

5，merge子句用于match或create一个关系

MATCH (charlie:Person { name: 'Charlie Sheen' }),(wallStreet:Movie { title: 'Wall Street' })
MERGE (charlie)-[r:ACTED_IN]->(wallStreet)
RETURN charlie.name, type(r), wallStreet.title
6，merge子句用于match或create多个关系

MATCH (oliver:Person { name: 'Oliver Stone' }),(reiner:Person { name: 'Rob Reiner' })
MERGE (oliver)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(reiner)
RETURN movie

# merge关系，如果找到关系就设置属性，如果没找到就创建关系并设置属性：
match (n{name:'xys'}),(m{name:'books'})  merge (n)-[r:read]->(m) on create set r.num=1 on match set r.num=r.num+1

7，merge子句用于子查询

复制代码
MATCH (person:Person)
MERGE (city:City { name: person.bornIn })
RETURN person.name, person.bornIn, city;

MATCH (person:Person)
MERGE (person)-[r:HAS_CHAUFFEUR]->(chauffeur:Chauffeur { name: person.chauffeurName })
RETURN person.name, person.chauffeurName, chauffeur;

MATCH (person:Person)
MERGE (city:City { name: person.bornIn })
MERGE (person)-[r:BORN_IN]->(city)
RETURN person.name, person.bornIn, city;

merge (n:Baoxianchanpin:Abc1535103448461383382) merge (m:Shiyi:Abc1535103448461383382) MERGE   (n)-[:`专业术语`]->(m) RETURN n,m

Some example data:

CREATE 
  (t1:Type {name:"t1"}),
  (t2:Type {name:"t2"}),
  (t3:Type {name:"t3"}),
  (t1)-[:REL]->(t2)
The query:

MATCH (t1:Type)
OPTIONAL MATCH (t1)-[r]->(t2:Type)
RETURN
  t1, t2,
  CASE r
    WHEN NULL THEN "other thing"
    ELSE "something"
  END AS info

CALL db.labels() YIELD label with label where label starts with 'Abc' WITH COLLECT(label) AS its FOREACH (value IN its |  merge (n:Baoxianchanpin ) set n.sign=value )

CALL db.labels() YIELD label with label where label starts with 'Abc' WITH COLLECT(label) AS its FOREACH (value IN its |  MERGE (n:Baoxianchanpin {sign:value}) MERGE(m:Shiyi {sign: value}) MERGE  (n)-[:`专业术语`]->(m)  )

a b 都不存在，创建节点并建立关系
a b 都存在，只建立关系
a 存在 b 不存在，创建b节点并建立关系
a 不存在 b 存在，创建a节点并建立关系
MERGE (a:TEST1{_id:'3'})
WITH (a)
MERGE (b:TEST2{_id:'4'}) 
WITH a,b
WHERE a._id='3' AND b._id ='4' MERGE (a)-[r:CONTACT]->(b)

或：
MERGE (a:TEST1{_id:'3'})
WITH (a)
MERGE (b:TEST2{_id:'4'}) 
WITH a,b MERGE (a)-[r:CONTACT]->(b)


