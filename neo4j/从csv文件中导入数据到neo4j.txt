

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head movies.csv
movieId:ID,title,year:int,:LABEL
tt0133093,"The Matrix",1999,Movie
tt0234215,"The Matrix Reloaded",2003,Movie;Sequel
tt0242653,"天龙八部",2003,Movie;武装

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head actors.csv
personId:ID,name,:LABEL
keanu,"Keanu Reeves",Actor
laurence,"Laurence Fishburne",Actor
carrieanne,"Carrie-Anne Moss",Actor

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head roles.csv
:START_ID,role,:END_ID,:TYPE
keanu,"Neo",tt0133093,ACTED_IN
keanu,"Neo",tt0234215,ACTED_IN
keanu,"Neo",tt0242653,ACTED_IN
laurence,"Morpheus",tt0133093,ACTED_IN
laurence,"Morpheus",tt0234215,ACTED_IN
laurence,"Morpheus",tt0242653,ACTED_IN
carrieanne,"Trinity",tt0133093,ACTED_IN
carrieanne,"Trinity",tt0234215,ACTED_IN
carrieanne,"关系",tt0242653,关系类型

gswewf@gswewf-PC:~/docker/neo4j/linshi$


gswewf@gswewf-PC:~/docker/neo4j/linshi$ docker cp ../linshi linshi7474:/var/lib/neo4j/linshi
gswewf@gswewf-PC:~/yhb$ docker exec -it linshi7474 /bin/bash

"Neo4j-import"已被弃用，改为：“neo4j-admin import”
bash-4.3# ./bin/neo4j-admin import --mode=csv --nodes=/var/lib/neo4j/linshi/movies.csv --nodes=/var/lib/neo4j/linshi/actors.csv --relationships="/var/lib/neo4j/linshi/roles.csv" --database=movies.db


根据某个查询语句导出：
Match (n)-[r:`下一步`]->(c)
with collect(n) + collect(c) as colC, collect(r) as colR UNWIND colC AS n2 with distinct n2, colR with collect(n2) as colN, colR
CALL apoc.export.csv.data(colN,colR, '/var/lib/neo4j/import/export_nodes_rels.csv',{format:'plain'}) YIELD nodes, relationships
RETURN nodes, relationships

文件内容如下：
bash-4.4# head -n 5 /var/lib/neo4j/import/export_nodes_rels.csv
"_id","_labels","parser_dict","status","answer","pattern","name","recommend_question","min_max_val","non_pattern","_start","_end","_type","lvxingxiantuijian","age"
"5633",":TuijianState:Zhongdeanlian","{""儿子"": ""孩子"", ""爸"": ""父亲"", ""妈"": ""母亲"", ""我爸"": ""父亲"", ""我妈"": ""母亲"", ""我爸爸"": ""父亲"", ""我爹"": ""父亲"", ""我妈妈"": ""母亲"", ""小孩"": ""孩子"", ""老公"": ""配偶"", ""爸爸"": ""父亲"", ""我"": ""自己"", ""老婆"": ""配偶"", ""妈妈"": ""母亲"", ""女儿"": ""孩子""}","baoxiantijian","小联为您做保险体检啦~ 您可随时输入“退出”终止体检
（1/3）您想为哪位家人购买产品？","(?P<baoxiantijian>(父亲|母亲|自己|配偶|孩子|爸爸|妈妈|老婆|老公|儿子|女儿|爸|妈|我|我爹)+)","保险体检","[""父亲"",""母亲"",""自己"",""配偶"",""孩子""]","","",,,,,
"5634",":TuijianState:Zhongdeanlian","","age","了解到您为【自己】购买产品
（2/3）您【自己】的年龄是多少？","(?P<age>([一二两三四五六七八九十0-9])+([周岁天月个])*)","询问被投保人年龄","[""例如:1岁""]","[0,150]","([万亿元块])+",,,,,
bash-4.4# tail -n 5 /var/lib/neo4j/import/export_nodes_rels.csv
,,,,,,,,,,"5643","5644","下一步","东南亚、日韩、港澳台",""
,,,,,,,,,,"5644","5645","下一步","","[18,150]"
,,,,,,,,,,"5645","5646","下一步","",""
,,,,,,,,,,"5646","5647","下一步","",""
,,,,,,,,,,"5647","5648","下一步","",""


节点及关系同时导入：
LOAD CSV WITH HEADERS FROM "file:///export_nodes_rels.csv" AS line
FOREACH (n IN (CASE WHEN line._id IS NOT NULL THEN [1] ELSE[] END) |
    CREATE (p:TuijianState:Zhongdeanlian { id:toint(line._id),  parser_dict:line.parser_dict, status:line.status, answer:line.answer, pattern:line.pattern, name:line.name, recommend_question:line.recommend_question, min_max_val:line.min_max_val, non_pattern:line.non_pattern
})
)
FOREACH (n IN (CASE WHEN line._id is null THEN [1] ELSE[] END) |
    MERGE (user { id: toint(line._start)})
    MERGE (brand {id: toint(line._end)})
    MERGE (user)-[:`下一步2`{lvxingxiantuijian:line.lvxingxiantuijian, age:line.age}]->(brand)
)

# 将导出的数据导入neo4j:

更多示例见： https://neo4j.com/docs/operations-manual/current/tutorial/import-tool/

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head /home/gswewf/docker/neo4j/linshi/person.csv
1,Charlie Sheen
2,Oliver Stone
3,Michael Douglas
4,张三
5,李四

运行：
    LOAD CSV FROM "file:///home/gswewf/docker/neo4j/linshi/person.csv" AS line
    MERGE (n:Person {id: toInteger(line[0])})
    SET n.name = line[1]
    RETURN n

    会报错：
    ERROR：Neo.ClientError.Statement.ExternalResourceFailed
    Couldn't load the external resource at: file:/var/lib/neo4j/import/home/gswewf/docker/neo4j/linshi/person.csv

    原因是路径不对，更改路径及权限：
    gswewf@gswewf-PC:/var/lib/neo4j/import$ docker cp /home/gswewf/docker/neo4j/linshi/person.csv linshi7474:/var/lib/neo4j/import/person.csv
    gswewf@gswewf-PC:/var/lib/neo4j/import$ docker exec -it linshi7474 /bin/bash
    bash-4.3# cd /var/lib/neo4j/import
    bash-4.3# ls
    person.csv
    bash-4.3# chmod 777 person.csv
    bash-4.3#

    再运行：
    LOAD CSV FROM "file:///person.csv" AS line
    MERGE (n:Person2 {id: toInteger(line[0])})
    SET n.name = line[1]
    RETURN n

    就正常了

LOAD CSV FROM 导入导出路径问题：
在使用load csv导入文件时一直出问题
LOAD CSV WITH HEADERS FROM "?G:\importData.csv"
AS line
return line.n

后来才发现原来neo4j默认的设置是把文件导入的根目录限制在当前库的import文件夹下：
dbms.directories.import=import

dbms.directories.import 设置file:///与Cypher LOAD CSV子句一起使用的URL 的根目录。这必须设置为数据库服务器的文件系统上的单个目录，
并将使所有从file:///URL相对于指定目录加载的请求（类似于unix chroot的操作）。默认值为import。
这是一种安全措施，可防止数据库访问标准导入目录之外的文件。设置dbms.directories.import为空删除此安全措施，而是允许访问系统上的任何文件。这是不推荐的。

文件URL将相对于dbms.directories.import目录解析。例如，一个文件的URL通常会看起来像file:///myfile.csv或file:///myproject/myfile.csv。
如果dbms.directories.import设置为默认值导入，则使用上述URL LOAD CSV将分别从<NEO4J_HOME> /import/myfile.csv和<NEO4J_HOME> import / myproject / myfile.csv读取。
如果设置为/ data / csv，则使用上述URL LOAD CSV将分别从/data/csv/myfile.csv和/data/csv/myproject/myfile.csv读取
找到当前数据库的目录，若发现没有import目录，需要自己手动创建。
然后放入csv文件，接下来就可以进行导入操作了：

USING PERIODIC COMMIT 1000
LOAD CSV FROM "file:///node.csv" AS line
create (a:Node{name:line[0]})

在LOAD CSV前面加上USING PERIODIC COMMIT 1000，1000表示每1000行的数据进行一次Transaction提交，提升性能。

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head products.csv
productID,productName,supplierID,categoryID,quantityPerUnit,unitPrice,unitsInStock,unitsOnOrder,reorderLevel,discontinued
1,Chai,1,1,10 boxes x 20 bags,18.00,39,0,10,0
2,Chang,1,1,24 - 12 oz bottles,19.00,17,40,25,0
3,Aniseed Syrup,1,2,12 - 550 ml bottles,10.00,13,70,25,0
4,Chef Anton's Cajun Seasoning,2,2,48 - 6 oz jars,22.00,53,0,0,0
5,Chef Anton's Gumbo Mix,2,2,36 boxes,21.35,0,0,0,1
6,Grandma's Boysenberry Spread,3,2,12 - 8 oz jars,25.00,120,0,25,0
7,Uncle Bob's Organic Dried Pears,3,7,12 - 1 lb pkgs.,30.00,15,0,10,0
8,Northwoods Cranberry Sauce,3,2,12 - 12 oz jars,40.00,6,0,0,0
9,Mishi Kobe Niku,4,6,18 - 500 g pkgs.,97.00,29,0,0,1

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/products.csv" AS row
CREATE (n:Product)
SET n = row,
  n.unitPrice = toFloat(row.unitPrice),
  n.unitsInStock = toInteger(row.unitsInStock), n.unitsOnOrder = toInteger(row.unitsOnOrder),
  n.reorderLevel = toInteger(row.reorderLevel), n.discontinued = (row.discontinued <> "0")

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head categories.csv
categoryID,categoryName,description,picture
1,Beverages,"Soft drinks, coffees, teas, beers, and ales",0x151C2F00020000000D000E0014002100FFFFFFFF4269746D617020496D616765005061696E742E5069637475726500010500000200000007000000504272757368000000000000000000A0290000424D98290000000000005600000028000000AC00000078000000010004000000000000000000880B0000880B0000080000
2,Condiments,"Sweet and savory sauces, relishes, spreads, and seasonings",0x151C2F00020000000D000E0014002100FFFFFFFF4269746D617020496D616765005061696E742E5069637475726500010500000200000007000000504272757368000000000000000000A0290000424D98290000000000005600000028000000AC00000078000000010004000000000000000000880B0000880B0000080000

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/categories.csv" AS row
CREATE (n:Category)
SET n = row

gswewf@gswewf-PC:~/docker/neo4j/linshi$ head suppliers.csv
supplierID,companyName,contactName,contactTitle,address,city,region,postalCode,country,phone,fax,homePage
1,Exotic Liquids,Charlotte Cooper,Purchasing Manager,49 Gilbert St.,London,NULL,EC1 4SD,UK,(171) 555-2222,NULL,NULL
2,New Orleans Cajun Delights,Shelley Burke,Order Administrator,P.O. Box 78934,New Orleans,LA,70117,USA,(100) 555-4822,NULL,#CAJUN.HTM#
3,Grandma Kelly's Homestead,Regina Murphy,Sales Representative,707 Oxford Rd.,Ann Arbor,MI,48104,USA,(313) 555-5735,(313) 555-3349,NULL

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
CREATE (n:Supplier)
SET n = row

# 其他示例：
USING PERIODIC COMMIT 300 LOAD CSV WITH HEADERS FROM "file:///test.csv" AS line
MERGE (a:airplane{name:line.name,type:line.type,id:line.id})

USING PERIODIC COMMIT 10
LOAD CSV FROM "file:///test.csv" AS line
create (a:airplane{name:line[0],id:line[1],type:line[2]})

USING PERIODIC COMMIT 10
LOAD CSV FROM "file:///test.csv" AS line
match (from:airplane{id:line[0]),(to:position{id:[1]})
merge (from)-[r:fly{miles:line[2],time:line[3],price:line[4]}]-(to)
return r

Import cypher-shell
# web端导出数据：CALL apoc.export.cypher.all("/var/lib/neo4j/data/some-cypher.txt", {format:'plain',cypherFormat:'create'})
# 将导出的数据导入到neo4j
gswewf@gswewf-PC:~/docker/neo4j/linshi/data$ docker exec -it linshi7474 /bin/bash
bash-4.4# pwd
/var/lib/neo4j
bash-4.4# time ./bin/cypher-shell -u neo4j -p gswewf -a bolt://192.168.3.250:7687 < /var/lib/neo4j/data/some-cypher.txt
# 请注意，neo4j-shell已被弃用，并被cypher-shell取代。

其他的一些示例：


在CSV文件中有些字段是空的NULL，我们在用load csv时可以判断下再做处理
例如：
LOAD CSV WITH HEADERS from “file” as line
WITH line
, case when line.FirstNodeID is not null then [line] else [] end as NodeOneID
, case when line.SecondNodeID is not null then [line] else [] end as NodeTwoID
foreach(x in NodeOneID | CREATE (n1:NodeOne { ID : x.FirstNodeID }))
foreach(x in NodeTwoID | CREATE (n2:NodeTwo { ID : x.SecondNodeID }))

gswewf@gswewf-PC:~/docker/neo4j/linshi/data$ docker cp /home/gswewf/docker/neo4j/linshi/data/all.csv linshi7474:/var/lib/neo4j/import/all.csv
web端（http://192.168.3.250:7474/browser/）运行：
LOAD CSV WITH HEADERS FROM "file:///all.csv" AS line
WITH line
, case when line._id is not null then [line] else [] end as nodes
, case when line._start is not null then [line] else [] end as relationships
foreach(csvLine in nodes | MERGE (n:NodeOne { _id: csvLine._id, name :  csvLine.name ,title :  csvLine.title ,released :  toInt(csvLine.released) ,tagline :  csvLine.tagline ,born :  toInt(csvLine.born) }))
foreach(csvLine in relationships | MERGE (n1 {_id: csvLine._start})-[:r {roles: csvLine.roles}]->(n2 {_id: csvLine._end}) )


USING PERIODIC COMMIT 10000 LOAD CSV FROM  "http://apps.dealopia.com/offshoreleaks/offshore_leaks_csvs-20170104/Intermediaries.csv" AS line
WITH line where line[9] is not null
MERGE (i:Intermediateries{name:line[1],internal_id:line[2],address:line[3],
valid_until:line[4],country_codes:line[5],countries:line[6],status:line[7],node_id:line[8],sourceID:line[9]})

USING PERIODIC COMMIT 10000 LOAD CSV FROM  "http://apps.dealopia.com/offshoreleaks/offshore_leaks_csvs-20170104/Intermediaries.csv" AS line
WITH line,coalesce(line[9],"NoId") as sourceID
MERGE (i:Intermediateries{name:line[1],internal_id:line[2],address:line[3],
valid_until:line[4],country_codes:line[5],countries:line[6],status:line[7],node_id:line[8],sourceID:sourceID})

USING PERIODIC COMMIT 10000 LOAD CSV WITH HEADERS FROM  "http://apps.dealopia.com/offshoreleaks/offshore_leaks_csvs-20170104/Intermediaries.csv" AS line
MERGE (i:Intermediateries{internal_id:line.internal_id})
ON CREATE SET i += apoc.map.clean(row.properties,['internal_id'],[])

USING PERIODIC COMMIT 10000 LOAD CSV WITH HEADERS FROM  "http://apps.dealopia.com/offshoreleaks/offshore_leaks_csvs-20170104/Intermediaries.csv" AS line
MERGE (i:Intermediateries{internal_id:line.internal_id})
ON CREATE SET i.name = line.name,i.address = line.address, i.valid_until = line.valid_until,
i.country_codes = line.country_code, i.countries = line.countries,i.status = line.status,i.node_id = line.node_id,
i.sourceID = line.sourceID,i.note = line.note



# 通过LOAD CSV 创建节点、关系，并设置labels：
LOAD CSV WITH HEADERS FROM 'file:///testfile.csv' AS line
CREATE (x:line.label)
# 上面这样写会报错，只能下面这样写：
USING PERIODIC COMMIT 1000
LOAD CSV WITH HEADERS FROM 'file:///testfile.csv' AS LINE
CREATE (n:load {lab:line.label, prop:line.prop});

CREATE INDEX ON :load(lab);

MATCH (n:load {lab:'label1'})
SET n:label1
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'label2'})
SET n:label2
REMOVE n:load
REMOVE n.lab;


可变参数解释：
1、USING PERIODIC COMMIT 300
使用自动提交，每满300条提交一次，防止内存溢出
2、WITH HEADERS
从文件中读取第一行作为参数名，只有在使用了该参数后，才可以使用line.name这样的表示方式，否则需使用line[0]的表示方式
3、AS line
为每行数据重命名
4、MERGE
用merge比用create好一点，可以防止数据重复；导入node时一般用create语句，导入关系时一般用merge语句，防止重复导入

可能遇到的问题：
1、导入后中文乱码
因为neo4j是utf-8的，而widows下的CSV默认保存是ANSI的，需要用记事本另存为成UTF-8的

2、如何导入关系
在neo4j中，虽然有一个自增的id属性，但是要想使用它还是很麻烦的，尤其是在web管理端
因此在使用CSV创建关系时，需要我们自己指定或添加一个属性来作为“主键”，在创建关系时根据该属性来获取节点，并添加关系

USING PERIODIC COMMIT 10
LOAD CSV FROM "file:///test.csv" AS line
match (from:airplane{id:line[0]),(to:position{id:[1]})
merge (from)-[r:fly{miles:line[2],time:line[3],price:line[4]}]-(to)
return r

# 通过“CALL apoc.export.csv.all( "/var/lib/neo4j/data/all.csv", {})” 导出的csv数据，重新导入到neo4j;
# 导出的数据样例如下：
_id	_labels	name	Name	_start	_end	_type	since
0	:Person	Euler
1	:Person	Bernoulli
2	:Xianzhong:Xincheng	重疾险	重疾险
3	:Qingjing:Xincheng	战争
				0	1	KNOWS	1768
				2	3	免赔条款	1768

LOAD CSV WITH HEADERS  FROM "/var/lib/neo4j/data/jykl_all_node.csv" AS line
MERGE (p:line._labels{id:line._id,name:line.name,alias:line.alias})

# 文件存放位置： /var/lib/neo4j/import/jykl_all_node.csv
LOAD CSV WITH HEADERS  FROM "file:///jykl_all_node.csv" AS line
MERGE (p:Abc{id:line._id,name:line.name,alias:line.alias})


USING PERIODIC COMMIT 1000
LOAD CSV WITH HEADERS FROM 'file:///testfile.csv' AS LINE
CREATE (n:load {lab:line.label, prop:line.prop});

CREATE INDEX ON :load(lab);

MATCH (n:load {lab:'label1'})
SET n:label1
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'label2'})
SET n:label2
REMOVE n:load
REMOVE n.lab;


labels_set = {'Baoxianjin',
 'Baoxianmingcheng',
 'Boolean',
 'Jiaoyinkanglian',
 'Jibing',
 'Jibingzhonglei',
 'Peichangqingkuang',
 'Qingjing',
 'Text',
 'Tiaokuantiaomu'}

for label in labels_set:
    print('''MATCH (n:load {{lab:'{0}'}})
SET n:{0}
REMOVE n:load
REMOVE n.lab;\n\n'''.format(label))


LOAD CSV WITH HEADERS  FROM "file:///jykl_all_node.csv" AS line
MERGE (p:Abc{id:line._id,name:line.name,alias:line.alias})

第一步：
LOAD CSV WITH HEADERS  FROM "file:///jykl_all_node.csv" AS line
MERGE (n:load {lab:line.label, id:line._id,name:line.name,alias:line.alias});

第二步：
CREATE INDEX ON :load(lab);

第三步：
MATCH (n:load {lab:'Jibing'})
SET n:Jibing
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Peichangqingkuang'})
SET n:Peichangqingkuang
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Baoxianjin'})
SET n:Baoxianjin
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Boolean'})
SET n:Boolean
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Jiaoyinkanglian'})
SET n:Jiaoyinkanglian
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Qingjing'})
SET n:Qingjing
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Tiaokuantiaomu'})
SET n:Tiaokuantiaomu
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Jibingzhonglei'})
SET n:Jibingzhonglei
REMOVE n:load
REMOVE n.lab;

MATCH (n:load {lab:'Text'})
SET n:Text
REMOVE n:load
REMOVE n.lab;
MATCH (n:load {lab:'Baoxianmingcheng'})
SET n:Baoxianmingcheng
REMOVE n:load
REMOVE n.lab;



"_id","_labels","name","alias","Name","_start","_end","_type","相关条款"
"105",":Baoxianmingcheng:Jiaoyinkanglian","安康重疾险","安康重疾险","安康重疾险",,,,



# 正常情况下，节点与关系需要分开在不同的csv文件中导入，导入节点：
LOAD CSV WITH HEADERS  FROM "file:///person_Format.csv" AS line
MERGE (p:person{id:line.id,name:line.name,age:line.age})

WITH HEADERS表明csv文件的第一行是属性名。
# 导入关系：
LOAD CSV WITH HEADERS FROM "file:///PersonRel_Format.csv" AS line
match (from:person{id:line.from_id}),(to:person{id:line.to_id})
merge (from)-[r:rel{property1:line.property1,property2:line.property2}]->(to)

其他一些示例：
LOAD CSV WITH HEADERS FROM "file:///test_dataset/edges.csv" AS line
WITH line WHERE line.relation ='RELATED_TO'
MATCH (person1:Person {pid:line.node1})
MATCH (person2:Person {pid:line.node2})
CREATE (person1)-[:RELATED_TO {type:line.type}]->(person2)

USING PERIODIC COMMIT
LOAD CSV FROM "file:///file-name.csv" AS line
WITH line
SKIP 2000000 LIMIT 1000000
MATCH (a:Person {name: line[0]}),(b:Person {name:line[1]})
CREATE (a)-[:FOLLOWS {period: line[2]}]->(b)



目前主要有以下几种数据插入方式：
    Cypher CREATE 语句，为每一条数据写一个CREATE
    Cypher LOAD CSV 语句，将数据转成CSV格式，通过LOAD CSV读取数据。
    官方提供的Java API —— Batch Inserter
    大牛编写的 Batch Import 工具
    官方提供的 neo4j-import 工具；"Neo4j-import"已被弃用，改为：“neo4j-admin import”

其中：
CREATE语句
    适用场景	1 ~ 1w nodes
    速度	很慢 (1000 nodes/s)
    优点	使用方便，可实时插入。
    缺点	速度慢

LOAD CSV语句
    适用场景	1w ~ 10 w nodes
    速度	一般 (5000 nodes/s)
    优点	使用方便，可以加载本地/远程CSV；可实时插入。
    缺点	需要将数据转换成CSV

neo4j-admin import
    适用场景	千万以上 nodes
    速度		非常快 (数万 nodes/s)
    优点 官方出品，比Batch Import占用更少的资源
    缺点	需要转成CSV；必须停止neo4j；只能生成新的数据库，而不能在已存在的数据库中插入数据。

