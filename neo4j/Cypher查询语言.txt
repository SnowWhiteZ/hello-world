
Cypher查询语言

查询语言包括几部分：
START：通过索引查找或者元素的ID值获取的图中的起始节点
MATCH：图的匹配模式，匹配START的开始节点
WHERE：过滤条件
RETURN：返回所需的结果
CREATE：创建节点或者关系
DELETE：删除节点、关系或者属性
SET：设置属性的值
FOREACH：对list中的元素一次一个的执行操作( Performs updating actions once per element in a list)
WITH：切分一个query成多个不同的部分


http://shanshanpt.github.io/2016/02/17/Neo4j-1.html

1.基本操作符
　　 Cypher的操作符包括常见的一些数学计算符号例如+, -, *, / 和 %,还有一些比较比较操作符例如=, <>, <, >, <=, >=。这些操作符都比较简单, 下面主要讲讲'?'和'!'操作符。这两个操作符是用于处理缺少值情况,即当在查询过程中,用于检查某个属性是否存在。 在缺失属性时,'?'操作符总是返回true,'!'操作符返回false。这两个操作符有点类似于C/C++中的断言assert。 例如: where n.alias ?= "A",如果n不存在这个属性,那么这个比较返回true, 对于where n.alias != "A",如果n不存在这个属性,那么这个比较返回false。
2.一些实用模式
1).创建节点

　　 首先,我们必须得有数据,才能谈到查询。最简单的创建节点的代码如下:
create n
这个节点n没有任何属性,只有系统分配的ID。如果想给创建的节点一些属性,代码如下:

create (n {name:"A", age:10})
上面代码中{}之间是设置的节点属性。 有些时候想要在创建节点的时候给节点一个Label标签,那么代码为:

create (n:User {name:"A", age:10})
上面的代码给创建的节点n打了User标签。 如果想要返回创建的节点,那么加上return语句就可以了,代码是:

create (n:User {name:"A", age:10}) return n

但是create是一直在创建新的；
比如连续执行两次下面的命令
CREATE (gp1:GoogleProfile1 {Id: 201401, Name:"Apple"})
会创建两个相同的节点；
CQL CREATE命令检查此节点是否可用，它只是在数据库中创建新节点。
通过观察这些结果，我们可以说CREATE命令总是向数据库添加新的节点。

连续多次执行下面的命令
MERGE (gp2:GoogleProfile2{ Id: 201402,Name:"Nokia"})
却只有一条数据；
如果我们观察上面的查询结果，它只显示一行，因为CQL MERGE命令检查该节点在数据库中是否可用。 如果它不存在，它创建新节点。 否则，它不创建新的。
通过观察这些结果，我们可以说，CQL MERGE命令将新的节点添加到数据库，只有当它不存在。


Neo4j使用CQL MERGE命令 -
创建节点，关系和属性
为从数据库检索数据
MERGE命令是CREATE命令和MATCH命令的组合。
MERGE = CREATE + MATCH
Neo4j CQL MERGE命令在图中搜索给定模式，如果存在，则返回结果

如果它不存在于图中，则它创建新的节点/关系并返回结果。

Neo4j CQL MERGE语法

MERGE (<node-name>:<label-name>
{
   <Property1-name>:<Pro<rty1-Value>
   .....
   <Propertyn-name>:<Propertyn-Value>
})

语法说明：
S.No.	语法元素	描述
1。	MERGE	它是一个Neo4j CQL关键字。
2。	<node-name>	它是节点或关系的名称。
3。	<label-name>	它是节点或关系的标签名称。
4。	<property_name>	它是节点或关系的属性名称。
5。	<property_value>	它是节点或关系的属性值。
6。	：	使用colon（:)运算符来分隔节点或关系的属性名称和值。

注意 -
Neo4j CQL MERGE命令语法与CQL CREATE命令类似。
我们将使用这两个命令执行以下操作 -
创建具有一个属性的配置文件节点：Id，名称
创建具有相同属性的同一个Profile节点：Id，Name
检索所有Profile节点详细信息并观察结果
我们将使用CREATE命令执行这些操作

可以在cypher语句前面加上`PROFILE`观看查询的细节问题(耗时，性能分析)：
PROFILE MATCH (n:Baoxianjin),(n2:Jibing) RETURN n LIMIT 25

参考：https://www.w3cschool.cn/neo4j/neo4j_cql_merge.html

2).创建属性关系

　　 节点是最基本的数据,节点之间的关系是更重要的一种数据。下面看看创建节点之间的属性,代码如下:

start n1=node(id1), n2=node(id2)
create n1-[:rel]->n2
start是关键词,表示从当前定义的节点开始。上面代表的意思是,首先定义了两个节点n1和n2, 两个节点分别是ID值为id1和id2的节点,node可以通过参数获取相应的节点,注意,参数可以多个,例如node(id1,id2)。 接着创建两个节点之间的关系,Cypher中的关系使用"-->"和"--"表示。"-->"代表有方向的关系,例如A是B的老师,那么为: A-老师->B; "--"仅仅代表两者之间存在关系,至于是神马关系都无所谓,只要有联系就是OK的。上面的代码中创建了n1到n2的关系, 关系名称是"rel"。创建关系之后如下图所示:
1

注意关系也可以有属性,属性的设置和节点的属性设置是类似的,代码如下:

start n1=node(id1), n2=node(id2)
create n1-[r:rel {name : "XXX", time : "YYY"}]->n2
return r
上面的代码创建的节点之间的关系,并且关系有两个属性分别是name和time,最后返回关系数据。
当然还有很多其他的创建方法,详见Neo4j手册。
创建好了数据之后,我们就可以做查询操作了,下面具体看看一些查询模式。


下面所有的执行过程都是以下图为基准的,如图所示,所有的节点的Label都是Person,

2

3).start

start表示从当前定义的点开始,也可以认为是定义了一些初始化节点变量。例如下面代码:

start a=node(id)
return a
上面代码表示将id节点赋值到变量a上,然后返回a节点。
对于node来说,可以绑定多个节点,例如:

start a=node(1,2,3)
return a
上面代码返回的a包含三个节点。
如果想要绑定所有的节点,那么可以这样:

start a=node(*) return a
上面所有的start中的绑定(初始化)都是针对节点进行的,对于关系,我们也可以这样做。看下面的代码:

start r=relationship(0) return r
或者使用rel()也是一样的。

START r=rel(0) return r
上面的代码返回的是关系ID=0的关系数据。
上面所有的操作都是针对节点或者关系ID进行绑定的,我们也可以通过索引关系来得到。假设现在节点放在索引node_idx中, 关系放在索引rel_idx中,那么我们通过下面的代码可以获得初始化的变量。

start n=node:node_idx(name = "A") return n
start r=relationship:rel_idx(property ="some_value") return r

例：有这么一个查询：通过索引找到一个名叫'John'的用户，并遍历图找到他的朋友的朋友，返回John和这些朋友的信息
MATCH (john)-[:friend]->()-[:friend]->(fof)
where john.name = 'John'
RETURN john, fof

 接下来，我们增加过滤的功能
下面的例子：通过节点的ID得到一个种类的列表，并遍历图找到这些种类的疾病，返回疾病名字是由‘严重’起始的种类和疾病信息
START user=node(74,52)
MATCH (user)-[:疾病]->(follower)
WHERE follower.name =~ '严重.*'
RETURN user, follower

4).match

match类似于SQL中的select,如果匹配的结果存在多个就返回多个,如果不存在那么返回null。看下面几个例子:

match n return n
上面代码会匹配所有的n节点,返回所有已经创建的节点。

match (n:Person) return n
上面代码匹配标签为Person的节点,并返回这些节点。当然你可以加上一些条件控制,例如:

macth (n:Person) where n.age=20 return n
上面的代码会返回Person中年龄=2的所有节点。where在后面会详细介绍。

当然match也可以匹配关系数据,如下面代码所示:

match ()-[r:rel]->() return rel
上面代码返回rel关系数据,返回的结果如下图所示:

# 根据标签进行限制搜索：
MATCH p=()-[r:`保险责任`]->(n) where 'Baoxianzeren' in labels(n) and not 'Shiyi' in labels(n) return p

或者： match(n) where not n:BAOLIULEIXING  optional match(n)-[r]-() delete n,r

3

在匹配关系过程中有"-->"和"--"两者,后者是不要求方向的关系。下面看下代码:

start a=node(id1) match a--x return x
上面代码返回的是和n1相关的节点,即n2和n4,结果如图所示:
4

如果将代码改成下面这样:

start a=node(id1) match a-->x return x
那么返回的结果只有n2。
我们还可以返回个某个节点相关的所有关系数据,代码如下:

start a=node(id2) match a-[r]-() return r
上面代码返回的是和n2相关的所有的关系数据,结果如下图所示:
5

下面看看多重关系的情况,先看下面的代码:

start a=node(id1) match a-[]-()-[]->()-[]->(b) return b
上面的代码是返回关系路径长度为3的结果,结果应该是n1本身和n5节点,结果如图所示:
6

当然你在()中定义具体的关系也是OK的,注意当指定关系路径不存在的时候返回null。

下面看看可变长度关系的情况,先看下面的代码:

start a=node(id1), x=node(id2, id3)
match a-[:rel*1..3]->x
return a,x
上面代码中rel*1..3表示a->x的关系在路径长度1~3之内是会返回的,否则不会被返回。

match除了上面之外还有一些其他的技巧,以后遇到的时候也需要注意!



5).where

　　 where子句和SQL中是类似的,即用于条件过滤。在条件过滤中,我们可以使用三个bool运算符辅助操作,分别是: and,or和not, 看下面的代码示例:

match (n:Person) where (n.age=<30 and n.name="A") or not(n.name="A")
return n
上面的代码会返回名字叫A并且年龄在30以下的Person以及名字不是A的Person。否定运算可以使用not操作。

where也可以进行模糊匹配,使用正则表达式=~ "regexp"进行处理,看下面的代码:

match (n:Person) where n.name =~ "n.*" return n
上面的代码返回的是Person中节点名字前面是"n"的节点,又有上图中所有节点都是"n"开头,那么返回所有节点。 下面我返回名字中存在"2"的节点,代码如下:

match (n:Person) where n.name =~ ".*2.*" return n
执行上面的代码,将会返回n2节点。
下面介绍一些特殊情况: 
1> 如果在正则表达式中需要有斜杠时可以通过"\"转义实现。例如:

start n=node(id3, id1)
where n.name =~ "some\/thing" return n
上面的但会会返回名字中有 "some/thing"字符串的节点。
2> 如果想要正则匹配部分大小写,那么需在匹配串前面加上(?i),如下面代码所示:

start n=node(3, 1)
where n.name =~ "(?i)XXX.*" return n
上面的代码会返回name中包含XXX和xxx的节点。
3> 如何过滤关系类型,例如我只想筛选出关系类型名称以M开头的关系,那么可以这样执行:

match ()-[r]->()
where type(r) =~ "r.*"
return r
上面的代码会过滤出以"r"开头的关系,并返回。注意这里使用了type函数,它可以识别关系r的类型(名称)。如果你只想过滤出名称存在"2"的关系, 那么代码这样写:

match ()-[r]->()
where type(r) =~ ".*2.*"
return r
4> 缺失属性过滤,之前已经介绍了,"?"和"!"操作符,当使用"?"匹配时候没有匹配到那么会where返回的是true,如果是"!"那么默认是false,看看下面代码:

match (n:Person)
where n.house ?= "exist"
return n
上面的代码会返回那些有房子或者没房子的Person,下面的代码只会返回有房子的节点:

match (n:Person)
where n.house != "exist"
return n
5> 如果你想通过关系进行过滤,那么可以这样写:

start a=node(id1), b=node(id2)
where a-->b
return b
上面代表表示如果a-->b关系存在,那么返回相应的b节点。

6> 如果想判断null值,那么可以使用is null或者is not null,下面看个例子:

start a=node(25), b=node(26)
match p=a-->b
where p is not null
return p
上面语句意义是:如果a-->b之间存在关系路径,那么就返回这个路径!



6).count

计数函数,和SQL下类似。对于所有的返回结果,都可以使用count进行计数。下面看一段代码:

match (n:Person) where n.name =~ "n.*" return count(n)
在之前的结构图中执行上面的代码会返回结果5,即代表n1~n5节点个数。 注意count还可以根据返回的结果进行自动分类操作,看下面代码:

match (n:Person) where n.name =~ "n.*" return n, count(n)
上面代码的返回结果如下图所示:
7



7).sum/avg/max/min

sum是求和函数,会自动将null值去掉;avg计算所有值的平均值;max取最大值;min取最小值,代码如下:

start n=node(id1,id2,id3)
return sum(n.age), avg(n.age), max(n.age), min(n.age)


8).collect

collect会将返回的结果放置到一个list中,代码如下:

match (n:Person) where n.name =~ "n.*" return collect(n)


9).distinct

distinct用于去重数据,和SQL中的类似,代码如下:

match (n:Person) return distinct(n.age)
上面的操作会对age进行去重,并将结果返回。



10). order by

　　 order by用于对输出的结果进行排序。注意,它不能使用节点或者关系排序,仅仅只针对其属性有效。 和SQL中的order by也是类似的。看一个简单地例子:

match (n:Person) return n order by n.name
上面的代码会按照n的name进行默认升序排序返回结果。如果你想将结果按照降序进行排序,那么代码如下:

match (n:Person) return n order by n.name desc
加上desc就可以了。
如果想要根据多个属性进行排序,那么直接在order by后面加上多个属性就可以了,那么order by会优先按照 第一个属性进行排序,如果在第一个属性相等的情况下,按照第二个属性进行排序...代码如下:

match (n:Person) return n order by n.name,n.age


11). skip

skip是跳过返回结果的前几项,基本用法比较简单,如下:

match (n:Person) return n skip 3
结果的前面三项被忽略,返回第三项之后的那些节点。



12). limit

limit是限制返回的结果数量,使用方法也很简单:

match (n:Person) return n limit 3
只返回前面三项结果。

*常用的做法: * 一般skip,limit已经order by混合使用比较多。
例如返回第3个节点~第6个节点,怎么处理呢?代码如下:

match (n:Person)
return n
skip 2
limit 4
按照上面代码逻辑,对于返回结果n,会跳过前面2个,即从第3个开始,然后limit 4说明只返回3开始的4个节点,即3~6节点。

如果加上排序,当然也是可以的,代码如下所示:

match (n:Person)
return n
order by n.age
skip 2
limit 4


13). set

set用于更新节点和关系数据。使用方法也比较简单,代码如下:

match (n:Person)
where n.name="n2"
set n.age=11
return n
前面两句是根据条件筛选出相应的节点,后面的set设置相应的节点的属性值,最终返回节点。 Neo4j中没有update,set其实就是update,可以更新属性值或者增加属性值。

当然也可以set关系属性,例如:

start r=rel(id) set r.shuxing="test" return r
上面的代码设置属性r的shuxing属性值为"test"。

# 修改一个节点的类型（实质是删除旧类型，设置新类型）
MATCH (n:Baoxianmingcheng) where n.name=~".*重大.*"
REMOVE n:Baoxianmingcheng
SET n:Baoxianchanpin
RETURN n

# 修改实体的关系
MATCH (n)-[r:`旧的关系类型`]->(m)
CREATE (n)-[r2:`新的关系类型`]->(m)
// 如果需要，复制属性
SET r2 = r
WITH r
DELETE r

14). delete

delete用于删除单个节点(此节点没有relationship),关系以及属性。
删除单一节点代码:

match (n:Person)
where n.name =~ "1.*"
delete n
上面的代码是将名称以"1"开头的节点都删除。
*注意: * 上面的代码无法删除有relationship的节点的,如果想要删除,那么可以下面这样做:

match (n:Person)
with n
match  n-[r]->()
delete r,n
上面的代码是将节点n和相应的关系同时删除,这样才是OK的!!!
同时注意:上面的代码使用了with,with其实是连接两个查询的关键句,这个具体可以去看文档。

删除属性代码如下:

start a = node(3)
delete a.age
return a


15).All/Any/None/Single

这些都是判断函数,All用于判断条件是否都符合;Any用于判断是否存在符合条件的节点; None对于判断的条件中,如果没有元素返回那么返回true;Single用于判断是不是仅有一个节点符合条件. 看一下代码:

start a=node(25),b=node(32)
match p=a-[*1..5]->b
where all(x in nodes(p) where x.age=11)
return p
上面的代码中如果p中所有的节点都有age=11,那么all才会返回true,where才成立.
如果将all换成any,那么只有存在一个节点满足age=11,那么就可以返回p.
如果将all换成None,只有当p中所有节点都没有age=11才会返回p.
如果将all换成single,那么只有当仅有一个元素的时候才会返回.



16).一些Scalar函数

1> length函数返回路径或者集合长度

start a=node(3) match p=a-->b return length(p)
2> type函数用于判断条件类型,之前已经使用过.

start n=node(3) match (n)-[r]->() return type(r)
3> id函数返回节点或者relationship的ID

start a=node(id) return id(a)
4> coalesce函数返回表达式中第一个非空值。

5> nodes函数返回一个路径中所有的节点,之前已经使用过.

6> relationships函数用于返回一个路径中所有的关系.

With用法示例
　　with从句可以连接多个查询的结果，即将上一个查询的结果用作下一个查询的开始。
　　两种用法：
　　1、通过使用oder by 和limit，with可以限制传入下一个match子查询语句的实体数目。
　　2、对聚合值过滤。
　　具体示例如下：
1.1 对聚合结果过滤
MATCH (david { name: "David" })--(otherPerson)-->()
WITH otherPerson, count(*) AS foaf
WHERE foaf > 1
RETURN otherPerson
代码块解释：（1）match与”David”关联（无向）的otherPerson；（2）然后return出度大于1的otherPerson。

1.2 对collect的元素进行排序
MATCH (n)
WITH n
ORDER BY n.name DESC LIMIT 3
RETURN collect(n.name)
代码块解释：（1）match所有人；（2）对所有人的name进行降序排列，并取top-3；（3）返回top-3的name并组成collect：返回结果为：[“Emil”,”David”,”Ceasar”]

1.3 在路径搜索的时候限制分支数
MATCH (n { name: "Anders" })--(m)
WITH m
ORDER BY m.name DESC LIMIT 1
MATCH (m)--(o)
RETURN o.name
代码块解释：（1）从”Anders”出发，找到关联（无向）的所有人的集合m；（2）对集合m按照name降序排列，取top-1；（3）返回与top-1关联（无向）的所有人的name。


一、Neo4j-Cypher查询语言-操作符
Cypher的操作符有三类：数学、等式和关系
数学操作符：+,-,*,/和%。其中只有+能作用在字符串和集合上
等式操作符：=,<>,<,>,<=,>=
因为Neo4j是一种模式自由的图数据库，Cypher还有2个特殊的操作符？和！
他们是被用在属性上面处理缺省值，在一个不存在的属性上进行比较，一般会报错。一般在对属性值做比较前需要先判断这个属性是否存在，而在使用？的情况下，如果属性缺失，比较总是返回true，相反，使用！，比较总是返回false
例如：
WHERE n.prop? = "foo"
此断言类似oracle的语法实现为：WHERE n.prop is null or n.prop = "foo"
它在属性n.prop缺失下返回true

WHERE n.prop! = "foo"
此断言类似oracle的语法实现为：WHERE n.prop is not null and n.prop = "foo"
它在属性n.prop缺失下返回false

警告：在同一个比较子句中同时使用？和！会带来不可预测的结果

二、Cypher里的表达式包括：
数值(integer or double)： 13， 40000, 3.14
字符串： “hello world”
布尔值： true, false, TRUE, FALSE
识别码：n, x, rel, myFancyIdentifier, `A name with weird stuff in it[]!`
属性： n.prop, x.prop, rel.thisProperty, myFancyIdentifier.`(weird property name)`
可空属性(标记了？或！的属性)：n.prop?, n.prop!
参数：{param}，{0}
集合表达式：["a", "b"], [1,2,3], ["a", 2, n.property, {param}], [ ]
函数调用：length(p), nodes(p)
聚合函数：avg(xprop), count(*)
关系类型：REL_TYPE, :`REL TYPE`, :REL1|REL2
路径-模式：(a)-->()<--(b)

三、标识符
当你需要引用部分模式时，你需要利用命名来使用它。不同部分的命名就叫做标识符
例如：
START n=node(1) MATCH (n)-->(b) RETURN b
n和b都是标识符
标识符是大小写敏感的，由字母(a-z)、数字(0-9)和下划线组成，但是必须已字母开头。如果必须使用其他字符，可以利用反引号'`'来标识
此规则同样适用于属性名

四、备注
利用双斜线(//)来增加备注(注释、COMMENT)
备注的例子：
START n=node(1) RETURN n //This is an end of line comment
OR
START n=node(1)
//This is a whole line comment
RETURN n

不是备注的例子：
START n=node(1) WHERE n.property = "//This is NOT a comment" RETURN n

相关节点的模式(Patterns for related nodes)
模式是由一个或者多个路径组成，路径直接用逗号分隔。一个路径就是一个节点和关系的序列，这个序列指定开始和结束的节点。例如(a)-->(b)
这个路径开始于节点a，通过outgoing关系指向节点b
路径可以随意地长，并且同一个节点可能在路径的不同部分出现
节点标识必须带括号， 必须是：(a)-->(b)，不能是：a-->b
如果你不在乎具体是哪个节点，不用指定它，只需用空括号来表示就OK了：(a)-->()-->(b)
结合关系的模式(Working with relationships)
如果需要指定两个节点之间的关系，可以如下做：(a)-[r]->(b)
如果你不在乎关系的方向，你可以省去关系的箭头：(a)--(b)
当你只关注特定关系类型时，你可以这么做：(a)-[:REL_TYPE]->(b)
你也可以指定多个关系类型，罗列各个关系，用管道符号"|"连接：(a)-[r:TYPE1|TYPE2]->(b)。这个模式就是在节点a到节点b匹配关系TYPE1或者TYPE2。这两个关系的别名为r。多关系类型不能用在CREATE和CREATE UNIQUE子句中
可选关系(Optional relationships)
当关系存在，可选关系就能匹配到数据，但是不存在关系，则返回null。与SQL的外关联类似，Cypher如果匹配到关系，返回数据，如果没有匹配到返回null。可选关系只能用在MATCH子句中。

控制关系的深度(Controlling depth)
一个模式关系可以跨越多重的图关系，这种关系叫做可变深度关系。这种关系用"*"标识：(a)-[*]->(b)，这表示从节点a开始到节点b，中间是一种outgoing的关系，但不限定经过几次关系找到节点b。这是一个比较重的查询，依托于图的结构，可能遍历很多层关系，也可能遍历很少的关系。
不过，可以设置关系匹配的最短路径和最长路径，关系标识为：-[:relType*minStep..maxStep]->
例如：(a)-[*3..5]->(b) 表示从a到b包含最少3层关系，最多5层关系
可变深度关系不能用于CREATE或CREATE UNIQUE
指定路径标识符(Assigning to path identifiers)
在图数据库里，路径是很重要的概念。路径是一个节点与关系的集合，描述图中的一个路径信息。可以用路径标识符指定一个路径：p=(a)-[*3..5]->(b)
可以在MATCH，CREATE和CREATE UNIQUE子句中，但模式作为表达式时不能使用。在如下的一个查询中看下如何用于这三个子句中

START me=node(3)
MATCH p1 = (me)-[*2]-(friendOfFriend)
CREATE (wife {name:"Gunhild"})
CREATE p2 = (me)-[:MARRIED_TO]->(wife)
CREATE UNIQUE p3 = (wife)-[:KNOWS]->(friendOfFriend)
RETURN p1,p2,p3


​​START me=node(3)
match p2 = (me)-[r1:MARRIED_TO]->(wife)-[r2:KNOWS]->(friendOfFriend)
where wife.name = "Gunhild"
delete r1, r2, friendOfFriend, wife
RETURN p2

查询两个节点间最短路径对应的所有实体关系列表：
MATCH p=(n0)-[*]->(n9)
where  n0.name = "保险产品" and n9.name="恶性肿瘤"
WITH extract(rel in relationships(p) | [STARTNODE(rel).name, type(rel), endnode(rel).name]) as relationshipLabels
RETURN distinct relationshipLabels


设置属性(Setting properties)
节点和关系是重要的，但是Neo4j在节点和关系上使用属性，也可以用于稠密图模型(Neo4j uses properties on both of these to allow for far denser graphs models)
单个属性在模式中用Map结构来表示，属性集合是把各个Map形式的属性放在大括号里，各个属性直接用逗号隔开：{ name: "Andres", sport: "BJJ" }。如果一个属性(Map)参数化(paramName)，那属性集合可以这样表示{paramName}
Maps只能用在CREATE和CREATE UNIQUE子句中。
在CREATE子句中，用于设置节点或者关系的属性。
在CREATE UNIQUE子句中，它用于匹配图中相关的元素，可能成功，也可能不成功。如果模式元素中的属性能绝对匹配图中元素的属性(图元素可以有多余的其他属性，但不影响匹配)，那么匹配成功。
如果在图元素中没有找到模式中的属性，那么这些属性就用来设置新创建元素的属性。


断言函数(Predicate functions)
函数名称	函数说明
ALL(identifier in collection WHERE predicate)	判断一个断言(predicate)是否满足集合(collection)里的所有元素
ANY(identifier in collection WHERE predicate)	判断一个断言(predicate)是否至少满足集合(collection)里的一个元素
NONE(identifier in collection WHERE predicate)	如果集合(collection)里的元素不满足断言(predicate)则返回true
SINGLE(identifier in collection WHERE predicate)	如果集合(collection)里的只有一个元素满足断言(predicate)则返回true

标量函数(Scalar functions)
函数名称	函数说明
LENGTH( collection )	返回集合的元素个数
TYPE( relationship )	返回关系的类型
ID( property-container )	返回节点或者关系的ID
COALESCE( expression [, expression]* )	返回expressions列表里第一个不为空的值
HEAD( expression )	返回一个集合 (collection)  里的第一个元素
LAST( expression )	返回一个集合 (collection)  里最后一个元素
集合函数(Collection functions)

函数名称	函数说明
NODES( path )	返回一个路径的所有节点
RELATIONSHIPS( path )	返回一个路径的所有关系
EXTRACT( identifier in collection : expression )	返回一个结果集合：对集合(collection)的所有元素执行expression的操作得到的结果
FILTER(identifier in collection : predicate)	返回集合(collection)中所有满足断言(predicate)的元素组成的集合
TAIL( expression )	返回集合中除了第一个之外的所有元素
RANGE( start, end [, step] )	返回从start开始，end结束(闭区间)内步长为step(非0)的所有整数数字

数学函数(Mathematical functions)
函数名称	函数说明
ABS( expression )	返回expression得到的数值的绝对值
ROUND( expression )	取整函数：返回小于等于expression得到的数值的最大整数(还是返回离expression得到的数值最近的整数？？)
SQRT( expression )	返回expression得到的数值的平方根
SIGN( expression )	符号函数：如果expression得到的数值，为0则返回0；为负数则返回-1；为正数则返回1

聚合函数(Aggregate functions)
函数名称	函数说明
COUNT( expression )	返回expression得到的结果的个数，expression也可为"*"
SUM( expression )	返回expression得到结果相加的和
AVG( expression )	返回expression得到结果的平均值
MAX( expression )	返回expression得到结果的最大值
MIN( expression )	返回expression得到结果的最小值
COLLECT( expression )	把expression得到的结果以list的形式返回
所有的聚合操作都能使用DISTINCT操作



http://neo4j.com.cn/public/cypher/default.html
