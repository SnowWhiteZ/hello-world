
数据文件都在，但查询结果却为空：
删除数据文件中的文件`neostore.labelscanstore.db`，重启服务器即可，原因暂不明；
ubuntu@10-13-158-31:~/yhb_test$ rm yhb.db/neostore.labelscanstore.db

查询时报错：
ERROR Neo.ClientError.Statement.TypeError
Expected entity id to be an integral value

主要原因是因为传入的参数不是int类型，这个时候转换为int类型即可：
# 定义一个变量：
:param batch: [{from:123,to:[44,12,128],created:"2016-01-13"}, {from:34,to:[23,35,2983],created:"2016-01-15"}]

# 使用变量：
UNWIND {batch} as row
MATCH (from) WHERE id(from) = toint(row.from)
MATCH (to) WHERE id(to) IN [x IN row.to | toint(x)] // list of ids
CREATE (from)-[rel:FOO]->(to)
SET rel.created = row.created return from, to

# 或者：
UNWIND $batch as row
MATCH (from) WHERE id(from) = toint(row.from)
MATCH (to) WHERE id(to) IN [x IN row.to | toint(x)] // list of ids
MERGE (from)-[rel:FOO]->(to)
SET rel.created = row.created return from, to

# 在浏览器中打开neo4j自动的browser,节点的名字不显示出来：
若节点不Node Labels，则即使有name属性，也不会显示name对应的值；只有给节点添加了Node Labels；才会显示出name;

bash-4.4# ./bin/neo4j-shell -file data/all_baoxian_20181214_165628.cypher 
ERROR (-v for expanded information):
	Error occurred in server thread; nested exception is: 
	java.lang.OutOfMemoryError: Java heap space

解决方法1：
bash-4.4# set HEAP_SIZE=2048m
修改 neo4j.conf 中的配置 (docker 中默认为512m)
dbms.memory.heap.initial_size=2048m
dbms.memory.heap.max_size=4096m

ubuntu@ip-172-33-11-15:~$ docker run --detach  --restart=always --name=zhongjixian_18704 \
                --publish=7474:7474 --publish=7687:7687     \
                --env NEO4J_AUTH=neo4j/gswyhq \
                --env NEO4J_dbms_allow__format__migration=true \
                -e TZ='CST-8' \
                -e NEO4J_dbms_db_timezone="SYSTEM" \
                -v $PWD/plugins:/plugins \
                 --volume=$PWD/data:/data \
                -e NEO4J_dbms_security_procedures_unrestricted=apoc.\\\* \
                -e NEO4J_apoc_export_file_enabled=true \
                -e NEO4J_apoc_import_file_enabled=true  \
                -e NEO4J_dbms_shell_enabled=true \
                -e NEO4J_dbms_shell_host=0.0.0.0 \
                -e NEO4J_dbms_shell_port=1337 \
                -e NEO4J_dbms_memory_heap_initial__size=1024m \
                -e NEO4J_dbms_memory_heap_max__size=2048m \
                neo4j:3.4.5
解决方法2：
直接重启对应的neo4j服务，释放内存。

neo4j 3.4 添加了一个  neo4j-admin memrec 命令，可以打印Neo4j堆和pagecache内存设置的建议:
bash-4.4# ./bin/neo4j-admin memrec --database=graph.db
当然也可以在客户端运行cypher:
CALL dbms.listConfig("heap");
╒═══════════════════════════════╤══════════════════════════════════════════════════════════════════════╤═══════╕
│"name"                         │"description"                                                         │"value"│
╞═══════════════════════════════╪══════════════════════════════════════════════════════════════════════╪═══════╡
│"dbms.memory.heap.initial_size"│"Initial heap size. By default it is calculated based on available sys│"512M" │
│                               │tem resources."                                                       │       │
├───────────────────────────────┼──────────────────────────────────────────────────────────────────────┼───────┤
│"dbms.memory.heap.max_size"    │"Maximum heap size. By default it is calculated based on available sys│"512M" │
│                               │tem resources."                                                       │       │
└───────────────────────────────┴──────────────────────────────────────────────────────────────────────┴───────┘

--env=NEO4J_dbms_memory_heap_initial__size=512m
--env=NEO4J_dbms_memory_heap_max__size=2G

# 同一个镜像在其他机器上运行正常，而在某台机器上运行报错：
2019-02-27 04:21:51.565+0000 ERROR Failed to start Neo4j: Starting Neo4j failed: Component 'org.neo4j.server.database.LifecycleManagingDatabase@5733f295' was successfully initialized, but failed to start. Please see the attached cause exception "/data/databases/graph.db/neostore.relationshiptypestore.db (Too many open files in system)". 
临时方案：可能是该机器人开的docker容器太多了，关闭一些不常用的docker容器就可以解决。
使用ulimit -a 可以查看当前系统的所有限制值，使用ulimit -n 可以查看当前的最大打开文件数。
新装的linux默认只有1024，当作负载较大的服务器时，很容易遇到error: too many open files。因此，需要将其改大。
使用 ulimit -n 65535 可即时修改，但重启后就无效了。（注ulimit -SHn 65535 等效 ulimit -n 65535，-S指soft，-H指hard)

因创建索引引起的异常（neo4j: Version:	3.4.5;  Edition:	Community）：
CREATE INDEX ON :Changjing(name)
执行下面的语句，第一遍执行正常，第二遍执行就会报错：
Neo.DatabaseError.General.UnknownError: org.neo4j.io.pagecache.CursorException: Read unreliable key, keySize=4069, keyValueSizeCap=4047, keyHasTombstone=false, offset=4121, pos=0 | GB+Tree[file:/var/lib/neo4j/data/databases/graph.db/schema/index/lucene_native-2.0/1/string-1.0/index-1, layout:StringLayout[version:0.1, identifier:24016946018123776], generation:4/6]

merge (m:Changjing { name:"在本合同保险期间内，且本合同有效的前提下，我们按以下约定承担保险责任：\\n1、癌症关爱保险金\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年内，若被保 险人被确诊初次发生本合同约定的癌症（无论一种或多种，下同）且未身故，我们按您根据本合同约定已支付的保险费总额给付癌症关爱保险金，本合同终止。在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，我们按基本保险金额给付癌症关爱保险金。\\n该项责任的总给付以1次为限。\\n2、癌症轻症提前给付保险金\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定 的癌症轻症，我们按基本保险金额的30%给付癌症轻症提前给付保险金予癌症关爱保险金受益人，提前给付后，本合同继续有效，癌症关爱保险金给付时将扣除已给付的癌症轻症提前给付保险金。癌症关爱保险金与癌症轻症提前给付保险金的给付金额之和累计以基本保险金额为限，任一项或两项保险金累计给付金额达到基本保险金额的，癌症关爱保险金给付责任与癌症轻症提前给付保险金给付责任同时终止。\\n3、癌症住院津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，并因该癌症进行住院治疗，我们按如下约定的金额给付癌症住院津贴：癌症住院津贴＝基本保险金额×3‰×实际住院天数。每一保单年度内，癌症住院津贴给付累计以180天为限；该项 责任的总给付累计以1000天为限。\\n4、癌症手术津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，并因该癌症接受本合同约定的癌症手术，我们对实际实施的每一次手术， 按基本保险金额的30%给付癌症手术津贴。每一保单年度内，癌症手术津贴给付累计以2次为限；该项责任的总给付累计以10次为限。\\n5、癌症放、化疗津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊 初次发生本合同约定的癌症，并因该癌症接受放、化疗，我们对实际实施的放、化疗治疗，按基本保险金额的30%给付癌症放、化疗津贴。每一保单年度内，癌症放、化疗津贴给付以1次为限；该项责任的总给付累计以10次为限。\\n6、肝脏移 植或造血干细胞移植津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，并因该癌症接受肝脏移植术或造血干细胞移植术，我们对实际实施的肝脏移植术或造血干细胞移植术， 按基本保险金额的3倍给付肝脏移植或造血干细胞移植津贴。该项责任的总给付累计以2次为限。\\n若被保险人在保险期间内被确诊初次发生本合同约定的癌症，保险期间届满后仍在继续癌症治疗行为的，我们继续承担前述癌症住院津贴、癌症手术津贴、癌症放、化疗津贴以及肝脏移植或造血干细胞移植津贴的给付责任，但最长不超过癌症确诊之日起满3年。保险期间届满后我们所继续承担的各项给付责任在每个完整年度的给付上限以及总给付累计上限与保险期间内该项责任的给付上限一致，并且与保险期间内该项责任的给付累计计算。前述完整年度的计算方式同保单年度，自保险期间届满时起算。\\n7、身故保险金和癌症身故体恤金\\n(1)若被保险人身故时未满18周岁若被保险人身故时未满18周岁，我们按以下两者 中金额较大者给付身故保险金，本合同终止：" })  RETURN m

而删除了索引，又恢复正常, 若字符长度没有这么长也是正常的：
DROP INDEX ON :Changjing(name)

空数据库，创建索引
CREATE INDEX ON :Changjing(name)
再执行下面语句会报错：
merge (m:Changjing { name:"在本合同保险期间内，且本合同有效的前提下，我们按以下约定承担保险责任：\\n1、癌症关爱保险金\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年内，若被保 险人被确诊初次发生本合同约定 的癌症（无论一种或多种，下同）且未身故，我们按您根据本合同约定已支付的保险费总额给付癌症关爱保险金，本合同终止。在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，我们按基本保险金额给付癌症关爱保险金。\\n该项责任的总给付以1次为限。\\n2、癌症轻症提前给付保险金\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定 的癌症轻症，我们按基本保险金额的30%给付癌症轻症提前给付保险金予癌症关爱保险金受益人，提前给付后，本合同继续有效，癌症关爱保险金给付时将扣除已给付的癌症轻症提前给付保险金。癌症关爱保险金与癌症轻症提前给付保险金的给付金额之和累计以基本保险金额为限，任一项或两项保险金累计给付金额达到基本保险金额的，癌症关爱保险金给付责任与癌症轻症提前给付保险金给付责任同时终止。\\n3、癌症住院津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊 初次发生本合同约定的癌症，并因该癌症进行住院治疗，我们按如下约定的金额给付癌症住院津贴：癌症住院津贴＝基本保险金额×3‰×实际住院天数。每一保单年度内，癌症住院津贴给付累计以180天为限；该项 责任的总给付累计以1000天为 限。\\n4、癌症手术津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，并因该癌症接受本合同约定的癌症手术，我们对实际实施的每一次手术， 按基本保险金额的30%给付癌 症手术津贴。每一保单年度内，癌症手术津贴给付累计以2次为限；该项责任的总给付累计以10次为限。\\n5、癌症放、化疗津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊 初次发生本合同约定的癌症 ，并因该癌症接受放、化疗，我们对实际实施的放、化疗治疗，按基本保险金额的30%给付癌症放、化疗津贴。每一保单年度内，癌症放、化疗津贴给付以1次为限；该项责任的总给付累计以10次为限。\\n6、肝脏移 植或造血干细胞移植津贴\\n在本合同生效或最后一次复效（以较迟者为准）之日起1年后，若被保险人被确诊初次发生本合同约定的癌症，并因该癌症接受肝脏移植术或造血干细胞移植术，我们对实际实施的肝脏移植术或造血干细胞移植术， 按基本保险金额的3倍给付 肝脏移植或造血干细胞移植津贴。该项责任的总给付累计以2次为限。\\n若被保险人在保险期间内被确诊初次发生本合同约定的癌症，保险期间届满后仍在继续癌症治疗行为的，我们继续承担前述癌症住院津贴、癌症手术津贴、癌症放、化疗 津贴以及肝脏移植或造血干细胞移植津贴的给付责任，但最长不超过癌症确诊之日起满3年。保险期间届满后我们所继续承担的各项给付责任在每个完整年度的给付上限以及总给付累计上限与保险期间内该项责任的给付上限一致，并且与保险期间内该项责任的给付累计计算。前述完整年度的计算方式同保单年度，自保险期间届满时起算。\\n7、身故保险金和癌症身故体恤金\\n(1)若被保险人身故时未满18周岁若被保险人身故时未满18周岁，我们按以下两者 中金额较大者给付身故保险金，本合同终止：①被保险人身故时您根据本合同约定已支付的保险费总额；\\n②被保险人身故时本合同保险单的现金价值。(2)若被保险人身故时年满18周岁若被保险人身故时年满18周岁，我们按以下两者中金额较 大者给付身故保险金，本合同终止：①被保险人身故时您根据本合同约定已支付的保险费总额的105%；②被保险人身故时本合同保险单的现金价值。若被保险人的身故是因本合同生效或最后一次复效（以较迟者为准）之日起1年后被确诊初次发生本合同约定的癌症所致，我们在给付前述身故保险金的基础上再按基本保险金额的50%给付癌症身故体恤金，本合同终止。\\n8、癌症保险费豁免\\n若被保险人符合癌症关爱保险金给付条件，我们除给付癌症关爱保险金外，对分期支付保险费 的投保人，按以下约定豁免本合同的保险费：自被保险人被确诊初次发生本合同约定的癌症后的首个保险费约定支付日起，我们每年于保险费约定支付日豁免当期应支付的本合同的保险费，直至本合同终止。\\n癌症或癌症轻症的确诊和治疗的医院范围\\n被保险人的 癌症或癌症轻症的确诊、癌症治疗行为应在卫生行政部门认定的二级以上（含二级）医院进行" }) RETURN length(m.name)
Neo.DatabaseError.General.UnknownError: Property value bytes length: 5426 is longer than 4095, which is maximum supported length of indexed property value.

但若不创建索引，或者删除索引
durp INDEX ON :Changjing(name)
则能正常运行；

删除数据（MATCH (n:Changjing) delete n），删除索引（drop INDEX ON :Changjing(name)），创建索引（CREATE INDEX ON :Changjing(name)），再执行merge则会引发该异常；
删除数据，删除索引，添加数据（长度超过一定范围，比如≥1363个字符），创建索引，再添加数据，不报错；

删除数据和索引，创建≥1347至≤1362个汉字的字符；再创建索引，再执行上面的语句，则会报错：
Neo.DatabaseError.General.UnknownError: org.neo4j.io.pagecache.CursorException: Read unreliable key, keySize=4076, keyValueSizeCap=4047, keyHasTombstone=false, offset=4114, pos=0 | GB+Tree[file:/var/lib/neo4j/data/databases/graph.db/schema/index/lucene_native-2.0/37/string-1.0/index-37, layout:StringLayout[version:0.1, identifier:24016946018123776], generation:4/6]

若之前没有数据，或索引数据属性对应汉字数＜1367，创建索引，再执行上面语句，则会报错：
Neo.DatabaseError.General.UnknownError: Property value bytes length: 5426 is longer than 4095, which is maximum supported length of indexed property value.

出现 TransientException=LockClient[10651] can't wait on resource RWLock[NODE(1903109)
一般是内存不够引起，可通过增加下面的参数设置在一定程度上减少此现象发生：
dbms.memory.heap.max_size=11900m
dbms.memory.pagecache.size=12100m

# 有时候查询会报错：
unwind ["Test", "Test1"] as cl 
call apoc.refactor.rename.label(cl, "Test2") 
return cl
错误信息：
Neo.ClientError.Statement.SyntaxError: Procedure call inside a query does not support naming results implicitly (name explicitly using `YIELD` instead) (line 2, column 1 (offset: 40))
"call apoc.refactor.rename.label(cl, "Test2") "
解决方案，将上查询语句改为下面的(添加yield)：
unwind ["Test", "Test1"] as cl 
call apoc.refactor.rename.label(cl, "Test2") yield total
return cl


问题：创建的索引不生效（创建时正常）
CREATE INDEX ON :Tongyonggraph(name)
Added 1 index, completed after 2 ms.
但实际上没有生效，输入`:schema`显示是创建失败：
:schema
Indexes
   ON :Tongyonggraph(name) FAILED 
No constraints
查看对应的日志是因为对应的属性name的属性值超过了限制：
root@4308c47c02da:/var/lib/neo4j# tail -f logs/debug.log 
java.lang.IllegalArgumentException: Index key-value size it to large. Please see index documentation for limitations

