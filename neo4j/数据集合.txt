
# 假设图谱中标签为Jibingzhonglei，有不同的几个；每一个对应关系`包含疾病`超过25个时，下表达式，查询到n的结果，可能只有一个；
MATCH (n:Jibingzhonglei)-[r:`包含疾病`]->(n2) RETURN n LIMIT 25

# 改成下式，可以查询出多个n:
MATCH (n:Jibingzhonglei)-[r:`包含疾病`]->(n2) RETURN n, count(*) limit 25
return 语句包含一个非聚合条目（ n 节点）和一个聚合函数（ count ）。这意味着在使用 n 节点分组结果，使每一个Jibingzhonglei的结果为一行。也可以在 order by 语句中使用聚合值排序整个结果集

# 对结果进行排序（默认升序）
MATCH (n:Jibingzhonglei)-[r:`包含疾病`]->(n2) RETURN n, count(*) order by count(*) limit 25

# 降序
MATCH (n:Jibingzhonglei)-[r:`包含疾病`]->(n2) RETURN n, count(*) order by count(*) desc limit 25

MATCH p=(n:Baoxianchanpin)-[*..3]-() where any(u in nodes(p)where u.name='安康无忧' ) RETURN n LIMIT 25
使用 NODES（p）Cypher 函数提取给定路径上的所有节点集。然后使用 ANY 函数对节点集中的每一个元素判断。如果在给定
的可迭代集中每一个元素匹配了`安康无忧`， ANY 函数将会返回 true ，如果在路径 p 上的没有一个节点是`安康无忧`，则这条路径将被放弃。

# 对结果进行分页排序：
MATCH (a:Jibing)RETURN a,count(*) AS appearances ORDER BY appearances DESC SKIP 3 LIMIT 10;
·order—— 在分页之前，对结果进行排序，因此分页返回的结果是一致的，无论是往前还是往后分页。
.desc: 降序排序，默认升序
·skip—— 划分结果集以便跳到指定的页。
·limit—— 以页面尺寸限制返回结果的数量。

MATCH (p:Jibing)RETURN p, p.name AS name, upper(p.name), coalesce(p.nickname,"没有查到，默认值") AS nickname, { name: p.name, label:head(labels(p))} AS person
返回结果：
╒══════════════════════╤═════════════╤═══════════════╤══════════╤═══════════════════════════════════════╕
│"p"                   │"name"       │"upper(p.name)"│"nickname"│"person"                               │
╞══════════════════════╪═════════════╪═══════════════╪══════════╪═══════════════════════════════════════╡
│{"name":"急性坏死及出血性胰腺炎"}│"急性坏死及出血性胰腺炎"│"急性坏死及出血性胰腺炎"  │"没有查到，默认值"│{"name":"急性坏死及出血性胰腺炎","label":"Jibing"}│
├──────────────────────┼─────────────┼───────────────┼──────────┼───────────────────────────────────────┤
│{"name":"因输血而感染爱滋病"}  │"因输血而感染爱滋病"  │"因输血而感染爱滋病"    │"没有查到，默认值"│{"name":"因输血而感染爱滋病","label":"Jibing"}  │
├──────────────────────┼─────────────┼───────────────┼──────────┼───────────────────────────────────────┤
│{"name":"亚尔兹默氏病"}     │"亚尔兹默氏病"     │"亚尔兹默氏病"       │"没有查到，默认值"│{"name":"亚尔兹默氏病","label":"Jibing"}     │
└──────────────────────┴─────────────┴───────────────┴──────────┴───────────────────────────────────────┘


