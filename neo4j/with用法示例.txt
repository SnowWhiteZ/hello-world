
with语句给cypher提供了强大的pipeline能力，可以一个或者query的输出，或者下一个query的输入 和return语句非常类似，唯一不同的是，with的每一个结果，必须使用别名标识。
通过这个功能，我们可以轻而易举的做到在查询结果里面在继续嵌套查询。

MATCH (person:Person)-[:ACTED_IN]->(m:Movie)
WITH person, count(*) AS appearances, collect(m.title) AS movies
WHERE appearances > 1RETURN person.name, appearances, movies


1.1 对聚合结果过滤

MATCH (david { name: "David" })--(otherPerson)-->()
WITH otherPerson, count(*) AS foaf
WHERE foaf > 1
RETURN otherPerson

代码块解释：（1）match与”David”关联（无向）的otherPerson；（2）然后return出度大于1的otherPerson。

1.2 对collect的元素进行排序

MATCH (n)
WITH n
ORDER BY n.name DESC LIMIT 3
RETURN collect(n.name)

代码块解释：（1）match所有人；（2）对所有人的name进行降序排列，并取top-3；（3）返回top-3的name并组成collect：返回结果为：[“Emil”,”David”,”Ceasar”]

1.3 在路径搜索的时候限制分支数

MATCH (n { name: "Anders" })--(m)
WITH m
ORDER BY m.name DESC LIMIT 1
MATCH (m)--(o)
RETURN o.name

代码块解释：（1）从”Anders”出发，找到关联（无向）的所有人的集合m；（2）对集合m按照name降序排列，取top-1；（3）返回与top-1关联（无向）的所有人的name。

MATCH (n1)-[r]->(n:Qingjing) with labels(n1) as l, count(*) as count where count > 1  RETURN l, count

CALL apoc.help("apoc") YIELD name, text
WITH * WHERE text IS null
RETURN name AS undocumented

例17:WITH语句使用使用示例
WITH语句是将第一部分匹配的输出作为下一部分匹配的输入。
1.查找有十个以上朋友的张姓男子

  MATCH (user)-[:FRIEND]-(friend)
  WHERE user.name =~ '张.*'
  WITH user, count(friend) AS friends
  WHERE friends > 10
  RETURN user
2.WITH语句中使用ORDER BY、SKIP 和 LIMIT 语句示例。

MATCH (user)-[:FRIEND]-(friend)
WITH user, count(friend) AS friends
ORDER BY friends DESC
SKIP 1
  LIMIT 3
RETURN user

# 查找到最短路径，再在最短路径上继续查询：
CREATE
  (offer: Offer),
  (sch1: Schedule),
  (sch2: Schedule),
  (stop1: Stop {name: "stop1"}),
  (stop2: Stop {name: "stop2"}),
  (stop3: Stop {name: "stop3"}),
  (stop4: Stop {name: "stop4"}),
  (stop1)-[:SWITCH_TO]->(stop2),
  (stop2)-[:CONNECTED_BY]->(stop3),
  (stop3)-[:SWITCH_TO]->(stop4),
  (stop2)-[:SCHEDULED_BY]->(sch1),
  (stop3)-[:SCHEDULED_BY]->(sch2),
  (sch1)-[:OFFERED_BY]->(offer),
  (sch2)-[:OFFERED_BY]->(offer)

MATCH
  (from:Stop {name:'stop1'}), (to:Stop {name:'stop4'}),
  path = allShortestPaths((from)-[r*]->(to))
UNWIND nodes(path) AS stopNode
OPTIONAL MATCH (stopNode)-[sb:SCHEDULED_BY]->(schedule:Schedule)-[ob:OFFERED_BY]-(offer:Offer)
RETURN stopNode, sb, ob, schedule, offer

# 根据节点连接的关系类型数量过滤（注意是数量是不是某种类型）
MATCH (n:Item) -[r]- ()
WITH DISTINCT n, type(r) AS relType
WITH n, collect(relType) AS relTypes
WHERE size(relTypes) > 10 RETURN n,relTypes LIMIT 25

# 根据两个值，查询其对应的最短路径：
MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) ) where n1.name =~ "条件1" and n2.name =~ "条件2"  return p
上句会查找所有满足条件的节点，再返回节点之间的最短路径；
有时候，并不是希望返回所有的最短路径，而是在最短路径中，筛选最短路径；
profile match p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
where n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
with collect(p) as ps, min(length(p)) as len
UNWIND ps as p1 with p1, len where length(p1)=len return p1

# 查询最后的关系为`理赔金额`，中间经过了节点`身故保险金`的最短的一条路径
MATCH p=(n)-[*0..9]->()-[r:`理赔金额`]-(n1) 
where ANY(x in nodes(p) where x.name='身故保险金') and not ()-->(n) 
with p, length(p) as len_p 
return extract(n IN nodes(p)| n.name) AS extracted
order by len_p limit 1

# 查询最后的关系为`理赔金额`，中间经过了节点`身故保险金`的所有最短路径
MATCH p=(n)-[*0..9]->()-[r:`理赔金额`]-(n1) 
where ANY(x in nodes(p) where x.name='身故保险金') and not ()-->(n) 
with collect(p) as ps, min(length(p)) as min_len UNWIND ps as p with p, min_len where length(p)=min_len
return extract(n IN nodes(p)| n.name) AS extracted

# 对查询结果的路径长度进行筛选：
profile match p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
where n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
with collect(p) as ps, length(p) as len
UNWIND ps as p1 with p1, len where len=2 return p1

# 按路径长度进行升序排列：
PROFILE MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
where n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
return p,length(p)
order by length(p)

match (n:mechword{name:'生物工程'}),(m:mechword{name:'现代化'})
with n,m
match p=shortestPath((n)-[r*..]-(m))
unwind nodes(p) as nn
with p,min(length(nn.name))as a
unwind nodes(p) as mm
with mm
where length(mm.name)=a
return mm.name;

使用with 可以达到管道命令的效果
查询论文的第一作者及最少引用次数：
MATCH (p:Paper)-[:`第一作者`]->(a:Author)
WITH a, p, size((p)-[:`被引用`]->()) as numCit
WITH a, min(numCit) as minCitations
RETURN a.authorName as authorName, minCitations
ORDER BY a.authorName

# 返回作者的最小引用次数及每篇论文的标题及引用次数：
MATCH (p:Paper)-[:`第一作者`]->(a:Author)
WITH a, p, size((p)-[:`被引用`]->()) as numCit
WITH a, min(numCit) as minCitations, collect(p {.title, numCit}) as papers
UNWIND papers as paper
RETURN a.authorName as authorName, minCitations, paper.title as title, paper.numCit as numCit
ORDER BY authorName




