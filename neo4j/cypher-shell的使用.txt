
neo4j-shell已被弃用，并被cyphell-shell替代。

# 启动一个neo4j容器
gswewf@gswewf-pc:~/docker/neo4j/movie$ sudo docker run  --restart=no  --detach  --name=movie7475 --publish=7475:7474 --publish=7688:7687    --volume=$PWD/data:/data  neo4j

# 浏览器打开：http://localhost:7475/browser/
# 输入`:play movie graph`，点击右箭头，导入数据
		创建：右边是一个包含由多个CREATE子句组成的单个Cypher查询语句的巨型代码块。 这将创建电影图。
		点击代码块
		注意它被复制到上面的编辑↑
		单击编辑器的播放按钮执行
		等待查询完成
		警告：每次运行时，将数据添加到当前数据库中！

# 在容器外直接执行 cypher语句：
gswyhq@gswyhq-PC:~$ docker exec -it linshi7474 /var/lib/neo4j/bin/cypher-shell -a bolt://192.168.3.145:7687 -u neo4j -p gswyhq "match (n) return n limit 2 ;"

# 进入容器：
gswewf@gswewf-pc:~/docker/neo4j/movie$ docker exec -it movie7475 /bin/bash
# 进入neo4j目录：
bash-4.3# cd /var/lib/neo4j/bin/
bash-4.3# pwd
/var/lib/neo4j/bin
bash-4.3# ./cypher-shell --help

# 连接neo4j服务及用户名密码：
bash-4.3# ./bin/cypher-shell -a bolt://localhost:8687 -u neo4j -p gswewf
Connection refused (连接失败，主要是因为在docker容器中开启的neo4j服务，对应服务主机名并不是localhost)
bash-4.3# ./bin/cypher-shell -a bolt://172.17.0.1:8687 -u neo4j -p gswewf
Connected to Neo4j 3.2.1 at bolt://172.17.0.1:8687 as user neo4j.
Type :help for a list of available commands or :exit to exit the shell.
Note that Cypher queries must end with a semicolon.

bash-4.3# ./cypher-shell -a bolt://localhost:7687 -u neo4j -p gswewf
	以用户neo4j连接到Neo4j 3.2.1在bolt：// localhost：7687。
	键入`:help`可用命令的列表，或`:exit`退出shell。
	请注意，Cypher查询必须以分号结尾。

# 执行查询操作：
neo4j> MATCH (n:Movie) RETURN n LIMIT 2;
+--------------------------------------------------------------------------------------+
| n                                                                                    |
+--------------------------------------------------------------------------------------+
| (:Movie {tagline: "Welcome to the Real World", title: "The Matrix", released: 1999}) |
| (:Movie {tagline: "Free your mind", title: "The Matrix Reloaded", released: 2003})   |
+--------------------------------------------------------------------------------------+

2 rows available after 4 ms, consumed after another 2 ms

# 退出cypher-shell（注意`exit`前面有`:`）
neo4j> :exit
Bye!
# 退出docker容器
bash-4.3# exit
exit
gswewf@gswewf-pc:~/docker/neo4j/movie$


启动对应的neo4j服务后，进入neo4j安装目录，连接上对应的数据路径：
gswewf@gswewf-pc:/usr/local/neo4j-community-3.1.1$ ./bin/neo4j-shell -path /home/gswewf/docker/neo4j/movie_graph/data

neo4j-shell已被弃用，并被cyphell-shell替代。

# 创建一个节点数据：
neo4j-sh (?)$ CREATE (:Movie { title:"The Matrix",released:1997 }) ;
+-------------------+
| No data returned. |
+-------------------+
Nodes created: 1
Properties set: 2
Labels added: 1
962 ms

# 查询刚刚创建的数据：
neo4j-sh (?)$ match (m:Movie) return m limit 2;
+-------------------------------------------+
| m                                         |
+-------------------------------------------+
| Node[0]{title:"The Matrix",released:1997} |
+-------------------------------------------+
1 row
329 ms


# Create a node
 neo4j-sh (?)$ mknode --cd

 # where are we?
 neo4j-sh (0)$ pwd
 Current is (0)
 (0)


 # On the current node, set the key "name" to value "Jon"
 neo4j-sh (0)$ set name "Jon"

 # send a cypher query
 neo4j-sh (Jon,0)$ match n where id(n) = 0 return n;
 +---------------------+
 | n                   |
 +---------------------+
 | Node[0]{name:"Jon"} |
 +---------------------+
 1 row
 53 ms


 # make an incoming relationship of type LIKES, create the end node with the node properties specified.
 neo4j-sh (Jon,0)$ mkrel -c -d i -t LIKES --np "{'app':'foobar'}"

 # where are we?
 neo4j-sh (Jon,0)$ ls
 *name =[Jon]
 (me)<-[:LIKES]-(1)


 # change to the newly created node
 neo4j-sh (Jon,0)$ cd 1

 # list relationships, including relationship id
 neo4j-sh (1)$ ls -avr
 (me)-[:LIKES,0]->(Jon,0)


 # create one more KNOWS relationship and the end node
 neo4j-sh (1)$ mkrel -c -d i -t KNOWS --np "{'name':'Bob'}"

 # print current history stack
 neo4j-sh (1)$ pwd
 Current is (1)
 (Jon,0)-->(1)


 # verbose list relationships
 neo4j-sh (1)$ ls -avr
 (me)-[:LIKES,0]->(Jon,0)
 (me)<-[:KNOWS,1]-(Bob,2)

更多示例见：http://neo4j.com/docs/2.3.11/shell-matrix-example.html

