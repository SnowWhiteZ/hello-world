

# 查找分支节点，或终止节点；若当前是分支节点，就返回当前节点，否则返回后续的分支节点或终止节点；
MATCH p=(n2:TuijianState:Zhongdeanlian) where n2.status='place' with n2 match (n2)-[*0..10]->(n3) where  (NOT (n3)-->() or length((n3)-->())>=2 or length((n2)-->())>=2 )return DISTINCT CASE WHEN length((n2)-->())>=2  THEN n2
 ELSE n3
END as ns limit 1

MATCH (start:Node)-[:REL]->(a)-[:REL]->(b)
WITH collect(distinct a) as aNodes, collect(distinct b) as bNodes
CALL apoc.when(size(aNodes) <= size(bNodes), 'RETURN aNodes as resultNodes', 'RETURN bNodes as resultNodes', {aNodes:aNodes, bNodes:bNodes}) YIELD value
RETURN value.resultNodes as resultNodes

MATCH (me:User{id:{myId}})
CALL apoc.case(
[{selection} = 'friends', "RETURN [(me)-[:FRIENDS]-(friend) | friend] as selection",
{selection} = 'coworkers', "RETURN [(me)-[:WORKS_AT*2]-(coworker) | coworker] as selection",
{selection} = 'all', "RETURN apoc.coll.union([(me)-[:FRIENDS]-(friend) | friend], [(me)-[:WORKS_AT*2]-(coworker) | coworker]) as selection"],
'RETURN [] as selection', {me:me}) YIELD value
RETURN value.selection as selection

CALL apoc.when（condition，ifQuery，elseQuery：''，params：{}）产生价值
基于条件，使用给定参数执行只读ifQuery或elseQuery
CALL apoc.do.when（condition，ifQuery，elseQuery：''，params：{}）产生价值
基于条件，执行使用给定参数编写ifQuery或elseQuery
CALL apoc.case（[condition，query，condition，query，...]，elseQuery：''，params：{}）yield value
给定条件/只读查询对的列表，使用给定参数执行与第一个条件评估关联的查询为true（或者如果没有则为else，则执行else查询）
CALL apoc.do.case（[condition，query，condition，query，...]，elseQuery：''，params：{}）yield value
给定条件/写入查询对的列表，使用给定参数执行与第一个条件评估关联的查询为true（或者如果没有则为else，则执行else查询）

# 更多示例： https://neo4j-contrib.github.io/neo4j-apoc-procedures/#graph_algorithms


MATCH (s:page)
WITH s
OPTIONAL MATCH (s)<-[r:pagetag]-(tag)
WITH s,r,tag
Where s.pagename contains 'juniors'or tag.name contains 'math'
return distinct s.pagename

MATCH (n:page)<-[r:pagetag]-(tag)
WITH n,r,tag
WHERE r IS NULL AND (n.title CONTAINS 'java' or tag.name IN ["java"])
OR NOT r is NULL AND (n.title CONTAINS 'java')
return distinct n.name

MATCH (n)
RETURN
CASE n.eyes
WHEN 'blue'
THEN 1
WHEN 'brown'
THEN 2
ELSE 3 END AS result

MATCH (n)
RETURN
CASE
WHEN n.eyes = 'blue'
THEN 1
WHEN n.age < 40
THEN 2
ELSE 3 END AS result

MATCH (n)
RETURN n.name,
CASE n.age
WHEN n.age IS NULL THEN -1
ELSE n.age - 10 END AS age_10_years_ago

MATCH (n)
RETURN n.name,
CASE
WHEN n.age IS NULL THEN -1
ELSE n.age - 10 END AS age_10_years_ago

MATCH (person:Person{name: "John"})
SET person.salary =
CASE person.type
WHEN 'Teacher' THEN 50000
WHEN 'Assistant' THEN 40000
WHEN 'Student' THEN 0
ELSE NULL
END
RETURN person

MATCH (u1:user {username: "pewpewlasers"}), (u2:user {username: "pewpew2"})
MERGE (u1)-[y:KNOWS]->(u2)
ON CREATE SET y.connected = 1
WITH y, has(y.connected) AS connected
REMOVE y.connected
WITH y, connected
OPTIONAL MATCH (x)-[zz:LIKES]->(yy)
FOREACH(ignoreMe IN CASE WHEN yy IS null THEN [] ELSE [1] END |
    MERGE x-[:LOVES]->(yy))
WITH zz, connected
RETURN zz, connected

MATCH (n)
OPTIONAL MATCH (n)-[:likes]->(p)
RETURN n
, coalesce(p, 'nobody')
, coalesce(labels(p),'nothing')

# coalesce：返回第一个not null值。match (a) where a.name='Alice' return coalesce(a.hairColor,a.eyes)

Cypher提供FOREACH语句，用来遍历列表中的每一个元素并分别执行更新操作。于是，一个包含0个元素或者1个元素的列表则可以看成一个条件表达式。因为当0个元素的时候，就不会执行遍历，而当1个元素的时候，就只执行一次遍历。

LOAD CSV FROM {url} AS row
MATCH (o:Organization {name:row.org})
FOREACH (_ IN case when row.type = 'Person' then [1] else [] end|
   MERGE (p:Person {name:row.name})
   CREATE (p)-[:WORKS_FOR]->(o)
)
FOREACH (_ IN case when row.type = 'Agency' then [1] else [] end|
   MERGE (a:Agency {name:row.name})
   CREATE (a)-[:WORKS_FOR]->(o)
)

需要注意的是，在FOREACH内部创建的变量无法在外部访问。你需要再重新查询一次，或者你需要再FOREACH内完成全部更新操作。

MATCH (charlie:Person { name: 'Charlie Sheen' }),(martin:Person { name: 'Martin Sheen' }), p =
shortestPath((charlie)-[*]-(martin))
WHERE NONE (r IN relationships(p) WHERE type(r)= 'FATHER')
RETURN p

match p=(n:Didian)-[*..2]-(n1)  where n.name='深圳'
and any(r IN relationships(p) WHERE type(r)= '营销服务部')
return  length(p), n.name, n1.name

# 查`深圳市`直接相连的Ssc, 若没有，则查隔一个点的Ssc
match p=(n3)<-[r:`地址`]-(n1:Zhongdeanlian:Ssc)-->(n2) where n2.name='深圳市'return p UNION match p=(n3)<-[r:`地址`]-(n1:Zhongdeanlian:Ssc)-[*..2]-(n2) where n2.name='深圳市' and not (:Zhongdeanlian:Ssc)-->(n2) return p

MATCH (person:Person{name: "John"})
SET person.salary =
CASE person.type
WHEN 'Teacher' THEN 50000
WHEN 'Assistant' THEN 40000
WHEN 'Student' THEN 0
ELSE NULL
END
RETURN person

# 根据关系的不同，设置不同的限定条件进行查询：
MATCH (n:All_baoxian {name: "保险产品"})-[r]->(n2)
WHERE n2.name =
CASE type(r)
WHEN '保险金额' THEN "最低基本保额10万元,且须为1000元的整倍数。"
WHEN '保障项目' THEN "被保险人轻症豁免保费"
ELSE NULL
END
RETURN n,r,n2

# 查询保险产品名中有`尊享`二字，或者保障项目中，有`境外意外身故`几字的产品：
MATCH (s:Baoxianchanpin)
WITH s
OPTIONAL MATCH (s)-[r:`保障项目`]->(tag)
WITH s,r,tag
Where s.name contains '尊享' or tag.name contains '境外意外身故'
return distinct s, tag

# 根据查询结果的不同，返回不同的答案：
MATCH (n3)<-[r1:`被保人年龄最大值`]-(n1:Admin_bussiness_site_web1_ai_19:Tongyong:Baoxianchanpin) -[r:`被保人年龄最小值`]->(n2) where n1.name="附加吉祥安康重疾" RETURN 
CASE
WHEN toFloat("7000")>=toFloat(n2.name) and toFloat("7000") <= toFloat(n3.name)  THEN '年龄符合投保要求!'
ELSE '年龄不符合投保要求!' END  as answer


判断某个保险金保不保某个疾病的逻辑： 
1， 若产品关系‘保障项目F’写的是保， 那查保的疾病，若有就保，若没有就不保； 
2，若产品关系‘保障项目F’的写的不保，那查不保的疾病，若没有就是保，若有就是不保;
MATCH  (n:Admin_bussiness_site_web1_ai_19:Tongyong:Baoxianchanpin{name:"保险产品"})-->(n1:Baozhangxiangmu{name:"重大疾病保险金"})-[r:`保障项目F`{name:"保"}]->(n2:Admin_bussiness_site_web1_ai_19:Tongyong:Jibing)
 with collect(DISTINCT n2.name) as n2name match (n3:Admin_bussiness_site_web1_ai_19:Tongyong:Jibing) where n2name and  "恶性肿瘤" in n2name
 RETURN  DISTINCT "保"  
UNION MATCH  (n:Admin_bussiness_site_web1_ai_19:Tongyong:Baoxianchanpin{name:"保险产品"})-->(n1:Baozhangxiangmu{name:"重大疾病保险金"})-[r:`保障项目F`{name:"不保"}]->(n2:Admin_bussiness_site_web1_ai_19:Tongyong:Jibing)
 with collect(DISTINCT n2.name) as n2name match (n3:Admin_bussiness_site_web1_ai_19:Tongyong:Jibing) where n2name and not "恶性肿瘤" in n2name 
 RETURN  DISTINCT "保"

# 统计计数,统计每个产品，各自有多少个保障项目
MATCH (n:Admin_bussiness_site_web1_ai_19:Baoxianchanpin)-[]->(m:Baozhangxiangmu)
WITH n, count(m) AS nrOfMovies
RETURN n { .name, nrOfMovies }
╒═════════════════════════════════╕
│"n"                              │
╞═════════════════════════════════╡
│{"name":"金福连","nrOfMovies":5}    │
├─────────────────────────────────┤
│{"name":"金雪球","nrOfMovies":2}    │
├─────────────────────────────────┤
│{"name":"保险产品","nrOfMovies":7}   │
├─────────────────────────────────┤
│{"name":"住院津贴医疗险","nrOfMovies":2}│
├─────────────────────────────────┤
│{"name":"小雨伞A款","nrOfMovies":2}  │
└─────────────────────────────────┘

MATCH (t:time)-[r:next*1]->(n:time) WHERE n.time > 1528601855959 AND t.time <= 1528601855959 
WITH n, t, r
CALL apoc.do.when(
  t.time <> 1528601855959,
  '  UNWIND r as rd DELETE rd WITH t,n 
     MERGE (t)-[:next]->(a:time {time: 1528601855959, src: "time"})-[:next]->(n) RETURN a',
  '', {t: t, r: r, n: n}) YIELD value AS rr
RETURN t, n, rr.a AS a


