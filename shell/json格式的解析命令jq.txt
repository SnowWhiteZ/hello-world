

gswyhq@gswyhq-PC:~$ cat json_raw.txt
{"name":"Google","location":{"street":"1600 Amphitheatre Parkway","city":"Mountain View","state":"California","country":"US"},"employees":[{"name":"Michael","division":"Engineering"},{"name":"Laura","division":"HR"},{"name":"Elise","division":"Marketing"}]}

# 上面文件内容就是json字符串，可读性太差；
# 事实上，jq就可以检查JSON的合法性（如果JSON不合法，jq .会报错），并把JSON格式化成更友好更可读的格式：
gswyhq@gswyhq-PC:~$ cat json_raw.txt |jq .
{
  "name": "Google",
  "location": {
    "street": "1600 Amphitheatre Parkway",
    "city": "Mountain View",
    "state": "California",
    "country": "US"
  },
  "employees": [
    {
      "name": "Michael",
      "division": "Engineering"
    },
    {
      "name": "Laura",
      "division": "HR"
    },
    {
      "name": "Elise",
      "division": "Marketing"
    }
  ]
}

# 更友好，可读形式展示json格式数据：
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq .
{
  "foo": 42,
  "bar": "less interesting data"
}

# 根据key获取value（解析不存在的元素，会返回null）
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq .bar
"less interesting data"

# JSON nested parse（嵌套解析）
gswyhq@gswyhq-PC:~$ cat json_raw.txt |jq '.employees[1].name'
"Laura"
gswyhq@gswyhq-PC:~$ cat json_raw.txt |jq '.location.city'
"Mountain View"
# 嵌套解析，获取所有列表元素
gswyhq@gswyhq-PC:~$ cat json_raw.txt |jq '.employees[].name'
"Michael"
"Laura"
"Elise"

# 内建函数
  jq还有一些内建函数如 keys，has
  keys是用来获取JSON中的key元素的：
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq keys
[
  "bar",
  "foo"
]

#   has是用来是判断是否存在某个key：
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq 'has("abc")'
false
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq 'has("bar")'
true

# 获取数组的长度
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "less interesting data"}' | jq '.bar|length'
21

# 应用，查看docker的镜像`gswyhq/ner`有哪些tag:
curl 'https://registry.hub.docker.com/v2/repositories/gswyhq/ner/tags/'|jq '."results"[]["name"]'

# 多个json输入：
gswyhq@gswyhq-PC:~$ echo '{"a":0,"b":{"c":"C"}}{"x":33}{"asd":889}' |   jq -s '.[0]'
{
  "a": 0,
  "b": {
    "c": "C"
  }
}

或 input 输出第一个：
gswyhq@gswyhq-PC:~$ echo '{"a":0,"b":{"c":"C"}}{"x":33}{"asd":889}' | jq -n input
{
  "a": 0,
  "b": {
    "c": "C"
  }
}

# inputs: 删除第一个对象并输出其他对象
gswyhq@gswyhq-PC:~$ echo '{"a":0,"b":{"c":"C"}}{"x":33}{"asd":889}' | jq -c inputs
{"x":33}
{"asd":889}

# 按行输出，读取第一行：
gswyhq@gswyhq-PC:~$ echo '{"a":0,"b":{"c":"C"}}{"x":33}{"asd":889}' | jq -c . | head -1
{"a":0,"b":{"c":"C"}}

# 切片操作：
gswyhq@gswyhq-PC:~$ echo '["a","b","c","d","e"]' |jq '.[2:4]'
[
  "c",
  "d"
]
gswyhq@gswyhq-PC:~$ echo '["a","b","c","d","e"]' |jq '.[2]'
"c"
gswyhq@gswyhq-PC:~$ echo '["a","b","c","d","e"]' |jq '.[2:]'
[
  "c",
  "d",
  "e"
]
gswyhq@gswyhq-PC:~$ echo '["a","b","c","d","e"]' |jq '.[-2:]'
[
  "d",
  "e"
]

# 获取多个字段：
gswyhq@gswyhq-PC:~$ echo '{"foo": 42, "bar": "something else", "baz": true}' |jq '.foo, .bar'
42
"something else"

gswyhq@gswyhq-PC:~$ echo '{"user":"stedolan", "projects": ["jq", "wikiflow"]}' |jq '.user, .projects[1]'
"stedolan"
"wikiflow"
gswyhq@gswyhq-PC:~$ echo '{"user":"stedolan", "projects": ["jq", "wikiflow"]}' |jq '.user, .projects'
"stedolan"
[
  "jq",
  "wikiflow"
]

# 管道操作：
gswyhq@gswyhq-PC:~$ echo '[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]' |jq '.[]'
{
  "name": "JSON",
  "good": true
}
{
  "name": "XML",
  "good": false
}
gswyhq@gswyhq-PC:~$ echo '[{"name":"JSON", "good":true}, {"name":"XML", "good":false}]' |jq '.[]|.name'
"JSON"
"XML"

# 计算
gswyhq@gswyhq-PC:~$ echo '{"name":"JSON", "num":3}' |jq '(.num +2)*4'
20

# 组合成数组列表：
gswyhq@gswyhq-PC:~$ echo '{"user":"stedolan", "projects": ["jq", "wikiflow"]}' |jq '[.user, .projects[]]'
[
  "stedolan",
  "jq",
  "wikiflow"
]

gswyhq@gswyhq-PC:~$ echo '[1,2,3]'|jq '[.[] |.*3]'
[
  3,
  6,
  9
]

# 输出为一个字典：
gswyhq@gswyhq-PC:~$ echo '{"user":"stedolan","titles":["JQ Primer", "More JQ"]}' | jq '{user, title: .titles[]}'
{
  "user": "stedolan",
  "title": "JQ Primer"
}
{
  "user": "stedolan",
  "title": "More JQ"
}

gswyhq@gswyhq-PC:~$ echo '{"user":"stedolan","titles":["JQ Primer", "More JQ"]}' | jq '{(.user): .titles[]}'
{
  "stedolan": "JQ Primer"
}
{
  "stedolan": "More JQ"
}

读取标题及主题，按\t分割，并按行写入
gswyhq@gswyhq-PC:~/data/test$ less web_text_zh_testa.json|jq -c '.title + "\t" + .topic' |xargs -L 1 echo > test.txt

有时候因为有特殊字符xargs会报错：
xargs: unmatched double quote; by default quotes are special to xargs unless you use the -0 option
这个时候可以使用命令：
less chat_raw_chat_corpus_20181119_095640_data.json |jq -c '._source.tag1 + "    " +._source.question + "    " + ._source.answer' | sed -e 's/"/"\\""/g' -e 's/.*/"&"/' |xargs -L 1 echo > chat_raw_chat_corpus_20181119_095640_data.txt

# 更多示例：
https://stedolan.github.io/jq/manual/#IO
https://stedolan.github.io/jq/manual/#example96



