
增加一条数据：
gswewf@gswewf-PC:~/yhb$ curl -XPOST 'localhost:9200/baike/baoxian?pretty' -d '{"answer": "保险公司完成保险收费、保单打印的保险成交过程。", "timestamp": "2017-12-26T13:59:37.416041", "question": "出单", "description": "保险常见名词解释"}'

通过制定的id进行删除：
删除id为AWCWwRuPPcvSZereEA8y的数据：gswewf@gswewf-PC:~/yhb$ curl -XDELETE 'http://localhost:9200/baike/baoxian/AWCWwRuPPcvSZereEA8y'

针对索引`dingding`的`title`字段进行查询：
curl -XGET 'localhost:9200/dingding/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match": {
            "title": "elasticsearch"
        }
    }
}
'

# 查询索引‘all_baoxian_kg_entity_synonyms_alias’，任意_type，id为22 的记录：
gswewf@gswewf-PC:~/dialogue_management_system$ curl -XGET 192.168.3.145:9200/all_baoxian_kg_entity_synonyms_alias/_all/22 -u elastic:web12008
{"_index":"all_baoxian_kg_entity_synonyms_20180417_190725","_type":"all_baoxian","_id":"22","_version":1,"found":true,"_source":{"timestamp":"2018-04-17T19:07:25.518866","实体标准词":"恶性肿瘤","实体类型":"Jibing","实体同义词":["恶性肿瘤","严重性肿瘤","癌症","恶性黑色素瘤","已发生转移的皮肤癌","血癌","骨癌","淋巴癌","肠癌","肝癌","胃癌","盆腔癌","子宫癌","宫颈癌","肺癌","纵隔癌","脑癌","神经癌","乳腺癌","食道癌","肾癌","白血病"]}}

# 按某个字段值进行查找：
import urllib.parse
urllib.parse.quote('模板id')
Out[3]: '%E6%A8%A1%E6%9D%BFid'
curl http://42.93.37.139:18200/all_baoxian_templates_question_alias/_search?q=%E6%A8%A1%E6%9D%BFid:7

查看集群状态
curl 'localhost:9200/_cat/health?v'

通过下面的命令，可以查询节点的列表：
curl 'localhost:9200/_cat/nodes?v'

在索引`customer`里设置类型`external`并插入一条数据：
curl -XPUT 'localhost:9200/customer/external/1?pretty' -d '
{
  "name": "John Doe"
}'

# 创建自增id, 并添加数据
curl -XPOST 'localhost:9200/dingding_faq/流程' -H 'Content-Type: application/json' -d'
{"answer": "流程-公募基金", "query_question": "我想了解公募基金", "question": "我想了解公募基金", "tag1": "流程", "intent": "other", "tag2": "公募基金"}'

# 需要注意的是，创建操作可以使用POST，也可以使用PUT。区别在于POST是作用在一个集合资源之上的（/articles），而PUT操作是作用在一个具体资源之上的（/articles/123），比如说很多资源使用数据库自增主键作为标识信息，而创建的资源的标识信息到底是什么只能由服务端提供，这个时候就必须使用POST。
# _index 、 _type 和 _id 的组合可以唯一标识一个文档。所以，确保创建一个新文档的最简单办法是，使用索引请求的 POST 形式让 Elasticsearch 自动生成唯一 _id :

上面的例子中，为我们创建了一个文档，并且id自动设置为1.
ES不需要再索引文档前，不需要明确的创建索引，如果执行上面的命令，索引不存在，也会自动的创建索引。

通过id进行查询：
curl -XGET 'localhost:9200/customer/external/1?pretty'

更新数据
 更新文档: 修改id=1的name属性，并直接增加属性和属性值

curl -XPOST 'localhost:9200/customer/external/1/_update?pretty' -d ' {
    "doc": {
        "name": "xyd",
        "age": 20
    }
}'

修改某条记录的数据，即通过post方法重新提交即可；
修改索引`all_baoxian_kg_entity_synonyms_alias`，类型‘all_baoxian’, id为22的数据：
curl -XPOST -u elastic:web12008 'localhost:9200/all_baoxian_kg_entity_synonyms_alias/all_baoxian/22' -d ' {
"timestamp":"2018-04-17T19:07:25.518866",
"实体标准词":"恶性肿瘤",
"实体类型":"Jibing",
"实体同义词":["恶性肿瘤","严重性肿瘤","癌症","恶性黑色素瘤","已发生转移的皮肤癌","血癌","骨癌","淋巴癌","肠癌","肝癌","胃癌","盆腔癌","子宫癌","宫颈癌","肺癌","纵隔癌","脑癌","神经癌","食道癌","肾癌","白血病"]
}'
返回结果：{"_index":"all_baoxian_kg_entity_synonyms_20180417_190725","_type":"all_baoxian","_id":"22","_version":2,"result":"updated","_shards":{"total":2,"successful":1,"failed":0},"created":false}

或者，仅仅提交修改的字段：
修改索引`all_baoxian_kg_entity_synonyms_alias`，类型‘all_baoxian’, id为22，`实体同义词`字段的数据：
gswewf@gswewf-PC:~$ curl -XPOST -u elastic:web12008 '192.168.3.105:9200/all_baoxian_kg_entity_synonyms_alias/all_baoxian/22/_update' -d ' {
"doc":{
    "实体同义词":["恶性肿瘤","严重性肿瘤","癌症","恶性黑色素瘤","已发生转移的皮肤癌","血癌","骨癌","淋巴癌","肠癌","胃癌","盆腔癌","子宫癌","宫颈癌","肺癌","纵隔癌","脑癌","神经癌","食道癌","肾癌","白血病"]
    }
}'

返回结果：{"_index":"all_baoxian_kg_entity_synonyms_20180417_190725","_type":"all_baoxian","_id":"22","_version":9,"result":"updated","_shards":{"total":2,"successful":1,"failed":0}}

# 根据某个查询结果进行更新：
curl -XPOST http://192.168.3.164:9200/t6.site.web1.ai_1_faq_alias/_update_by_query -H 'Content-Type: application/json' -d '{
  "query": {
    "term": {
      "ukey": "welcome"
    }
  },
  "script": {
    "inline": "ctx._source.answer = \"仅说一句，欢迎光临!!!\";ctx._source.timestamp=\"2018-09-18T10:43:27.661986\""
  }
}'


数据的更新，还可以通过_update端点，编写内嵌脚本（inline script）来实现。

或者更新某个指定字段（若字段不存在则添加）：
示例1， 添加`myfield`字段：
gswewf@gswewf-PC:~$ curl -XPOST 'localhost:9200/bnkhb_intent_20180516_094436/intent/0/_update?pretty=true' -d '{
    "script": "ctx[\"_source\"][\"myfield\"]=\"测试\"",
    "lang": "python",
    "params": {}
}'

示例2，更新`可选实体`字段：
gswewf@gswewf-PC:~$ curl -XPOST 'localhost:9200/bnkhb_intent_20180516_094436/intent/0/_update?pretty=true' -d '{
    "script": "ctx[\"_source\"][\"可选实体\"]=[\"Baoxianchanpin\", \"Jibing\"]",
    "lang": "python",
    "params": {}
}'

示例3，跟字段`kexuan`（是一个列表，字段名不能是中文），添加一个值；（注意，如果值存在，它仍然会添加它）
curl -XPOST 'localhost:9200/bnkhb_intent_20180516_094436/intent/0/_update?pretty' -d'
{
    "script" : {
        "inline": "ctx._source.kexuan.add(params.tag)",
        "lang": "painless",
        "params" : {
            "tag" : "Qingjing"
        }
    }
}'

# 删除id为0的记录，对应的`tag`字段：
curl -XPOST 'localhost:9200/bnkhb_intent_20180516_094436/intent/0/_update?pretty' -d'
{
    "script" : "ctx._source.remove(\"tag\")"
}'

# 添加一个新字段`new_field`并赋值：
curl -X POST "localhost:9200/test/type1/1/_update" -H 'Content-Type: application/json' -d'
{
    "script" : "ctx._source.new_field = \"value_of_new_field\""
}
'

 更新索引–脚本方式

curl -XPOST 'localhost:9200/customer/external/1/_update?pretty' -d' {
    "script": "ctx._source.age += 5"
}'

# 查询多个id的记录：
gswewf@gswewf-PC:~/dialogue_management_system/wiki$ curl -XGET 'localhost:9200/xinxin_templates_question_alias/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "ids" : ["1", "2"]
}
'

# 查询某个字段的多个记录
curl -XGET 'localhost:9200/xinxin_templates_question_alias/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "terms": {
      "模板id": [
        1,2,3,4      ]
    }
  }
} '

API还允许使用HEAD检查文档的存在，例如：
curl -XHEAD 'localhost:9200/twitter/tweet/0?pretty'

过滤source
默认情况下，get操作返回_source字段的内容，除非已使用stored_fields参数或禁用_source字段。您可以使用_source参数关闭_source检索：
curl -XGET 'localhost:9200/twitter/tweet/0?_source=false&pretty'

如果只需要完整的_source中的一个或两个字段，则可以使用_source_include＆_source_exclude参数来包含或过滤出所需的部分。这对于大文档特别有用，其中部分检索可以节省网络开销。两个参数都以逗号分隔的字段或通配符表达式列表。例：
curl -XGET 'localhost:9200/twitter/tweet/1?_source_include=*.id&_source_exclude=user&pretty'

# 执行一个脚本来增加计数器
curl -XPOST 'localhost:9200/test/type1/1/_update?pretty' -d'
{
    "script" : {
        "inline": "ctx._source.counter += params.count",
        "lang": "painless",
        "params" : {
            "count" : 4
        }
    }
}'

除了_source，通过ctx映射可以使用以下变量：_index，_type，_id，_version，_routing，_parent和_now（当前时间戳）。 我们还可以向文档中添加一个新字段：
更改执行的操作。如果标记字段包含绿色，此示例将删除文档，否则不执行任何操作（noop）：
curl -XPOST 'localhost:9200/test/type1/1/_update?pretty' -d'
{
    "script" : {
        "inline": "if (ctx._source.tags.contains(params.tag)) { ctx.op = \"delete\" } else { ctx.op = \"none\" }",
        "lang": "painless",
        "params" : {
            "tag" : "green"
        }
    }
}'

# 根据查询的结果进行删除：
curl -XPOST 'localhost:9200/zdal_kg_entity_synonyms_alias/_delete_by_query' -d '
{
  "query": {
    "terms": {
      "实体标准词.keyword": [
        "禅城",
        "富阳",
        "嘉定",
        "峻岭",
        "松江",
        "桐乡",
        "长安"
      ]
    }
  },
  "size": 5000
}'


一次查询多个不同的索引数据
多GET API允许基于索引，类型（可选）和id（可能路由）获取多个文档。该响应包括具有所有提取的文档的docs数组，每个元素在结构上类似于由get API提供的文档。这里是一个例子：
curl 'localhost:9200/_mget' -d '{
    "docs" : [
        {
            "_index" : "bnkhb_intent_20180516_094436",
            "_type" : "intent",
            "_id" : "1"
        },
        {
            "_index" : "bnkhb_templates_answer_alias",
            "_type" : "bnkhb",
            "_id" : "2"
        }
    ]
}'
