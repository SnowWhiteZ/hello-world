
elasticsearch 查询（match和term）
es中的查询请求有两种方式，一种是简易版的查询，另外一种是使用JSON完整的请求体，叫做结构化查询（DSL）。
由于DSL查询更为直观也更为简易，所以大都使用这种方式。
DSL查询是POST过去一个json，由于post的请求是json格式的，所以存在很多灵活性，也有很多形式。
这里有一个地方注意的是官方文档里面给的例子的json结构只是一部分，并不是可以直接黏贴复制进去使用的。一般要在外面加个query为key的机构。

match
最简单的一个match例子：

查询和"我的宝马多少马力"这个查询语句匹配的文档。

{
  "query": {
    "match": {
        "content" : {
            "query" : "我的宝马多少马力"
        }
    }
  }
}
上面的查询匹配就会进行分词，比如"宝马多少马力"会被分词为"宝马 多少 马力", 所有有关"宝马 多少 马力", 那么所有包含这三个词中的一个或多个的文档就会被搜索出来。
并且根据lucene的评分机制(TF/IDF)来进行评分。

match_phrase
比如上面一个例子，一个文档"我的保时捷马力不错"也会被搜索出来，那么想要精确匹配所有同时包含"宝马 多少 马力"的文档怎么做？就要使用 match_phrase 了
{
  "query": {
    "match_phrase": {
        "content" : {
            "query" : "我的宝马多少马力"
        }
    }
  }
}

异常：`query_question`下有一条记录“未成年人身故赔付”
但是通过下面语句，且搜索不到该条记录
{
  "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match_phrase": {
            "query_question": {
              "boost": 11,
              "query": "未成年人"
            }
          }
        }
      ]
    }
  }
}
只有改成下面这样，才能搜索到：
{
  "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "query_question": {
              "boost": 11,
              "term": "未成年人"
            }
          }
        }
      ]
    }
  }
}


`我的宝马多少马力`的ik_max_word分词结果是：我 宝马 多少 马力
和match查询类似，match_phrase查询首先解析查询字符串来产生一个词条列表。然后会搜索所有的词条，但只保留包含了所有搜索词条的文档，并且词条的位置要邻接。
一个针对短语`宝马马力`的查询不会匹配我们的任何文档，因为没有文档含有邻接在一起的‘宝马’和‘马力’词条。

match_phrase查询也可以写成类型为phrase的match查询：
{
  "query": {
    "match": {
      "title": {
        "query": "多少马力",
        "type": "phrase"
      }
    }
  }
}
当一个字符串被分析时，分析器不仅只返回一个词条列表，它同时也返回原始字符串的每个词条的位置、或者顺序信息；
位置信息可以被保存在倒排索引(Inverted Index)中，像match_phrase这样位置感知(Position-aware)的查询能够使用位置信息来匹配那些含有正确单词
出现顺序的文档，且在这些单词之间没有插入别的单词。

对于match_phrase的查询"宝马多少马力"，下面的条件必须为true：
‘宝马’、‘多少’和‘马力’必须全部出现在某个字段中。
‘多少’的位置必须比‘宝马’的位置大1。
‘马力’的位置必须比‘宝马’的位置大2。
如果以上的任何一个条件没有被满足，那么文档就不能被匹配。
完全匹配可能比较严，我们会希望有个可调节因子，少匹配一个或者顺序不同也满足，那就需要使用到slop。
# 少匹配一个也能匹配上（少了一个“多少”）：
{
  "query": {
    "match_phrase": {
      "title": {
        "query": "我的宝马马力",
        "slop": 2
      }
    }
  }
}
的查询结果是：
haizhi._index	haizhi._type	haizhi._id	haizhi._score	haizhi._source.title
test	haizhi	6	1.6045368	我的宝马马力
test	haizhi	7	0.70899993	我的宝马多少马力

# 顺序不同也可以匹配上：
{
  "query": {
    "match_phrase": {
        "title" : {
            "query" : "马力多少",
            "slop" : 4
        }
    }
  }
}
匹配结果是：
haizhi._index	haizhi._type	haizhi._id	haizhi._score	haizhi._source.title
test	haizhi	7	0.30648935	我的宝马多少马力

在内部，match_phrase查询使用了低级的span查询族(Query Family)来执行位置感知的查询。span查询是词条级别的查询，
因此它们没有解析阶段(Analysis Phase)；它们直接搜索精确的词条。

multi_match
如果我们希望两个字段进行匹配，其中一个字段有这个文档就满足的话，使用multi_match

{
  "query": {
    "multi_match": {
        "query" : "我的宝马多少马力",
        "fields" : ["title", "content"]
    }
  }
}

但是multi_match就涉及到匹配评分的问题了。

我们希望完全匹配的文档占的评分比较高，则需要使用best_fields
{
  "query": {
    "multi_match": {
      "query": "我的宝马发动机多少",
      "type": "best_fields",
      "fields": [
        "tag",
        "content"
      ],
      "tie_breaker": 0.3
    }
  }
}
意思就是完全匹配"宝马 发动机"的文档评分会比较靠前，如果只匹配宝马的文档评分乘以0.3的系数

我们希望越多字段匹配的文档评分越高，就要使用most_fields
{
  "query": {
    "multi_match": {
      "query": "我的宝马发动机多少",
      "type": "most_fields",
      "fields": [
        "tag",
        "content"
      ]
    }
  }
}
我们会希望这个词条的分词词汇是分配到不同字段中的，那么就使用cross_fields
{
  "query": {
    "multi_match": {
      "query": "我的宝马发动机多少",
      "type": "cross_fields",
      "fields": [
        "tag",
        "content"
      ]
    }
  }
}
term
term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇

{
  "query": {
    "term": {
      "content": "汽车保养"
    }
  }
}
查出的所有文档都包含"汽车保养"这个词组的词汇。

使用term要确定的是这个字段是否“被分析”(analyzed)，默认的字符串是被分析的。

拿官网上的例子举例：

mapping是这样的：

PUT my_index
{
  "mappings": {
    "my_type": {
      "properties": {
        "full_text": {
          "type":  "string"
        },
        "exact_value": {
          "type":  "string",
          "index": "not_analyzed"
        }
      }
    }
  }
}

PUT my_index/my_type/1
{
  "full_text":   "Quick Foxes!",
  "exact_value": "Quick Foxes!"  
}
其中的full_text是被分析过的，所以full_text的索引中存的就是[quick, foxes]，而extra_value中存的是[Quick Foxes!]。

那下面的几个请求：

GET my_index/my_type/_search
{
  "query": {
    "term": {
      "exact_value": "Quick Foxes!"
    }
  }
}
请求的出数据，因为完全匹配

GET my_index/my_type/_search
{
  "query": {
    "term": {
      "full_text": "Quick Foxes!"
    }
  }
}
请求不出数据的，因为full_text分词后的结果中没有[Quick Foxes!]这个分词。

bool联合查询: must,should,must_not
如果我们想要请求"content中带宝马，但是tag中不带宝马"这样类似的需求，就需要用到bool联合查询。
联合查询就会使用到must,should,must_not三种关键词。

这三个可以这么理解

must: 文档必须完全匹配条件
should: should下面会带一个以上的条件，至少满足一个条件，这个文档就符合should
must_not: 文档必须不匹配条件
比如上面那个需求：

{
  "query": {
    "bool": {
      "must": {
        "term": {
          "content": "宝马"
        }
      },
      "must_not": {
        "term": {
          "tags": "宝马"
        }
      }
    }
  }
}

来源：http://www.cnblogs.com/yjf512/p/4897294.html

控制返回字段的参数fields已经被stored_fields替代。stored_fields参数只会返回存储的fields————他将不会从_source中获取值。
示例：
{'query': {'match': {'query_question': {'minimum_should_match': '30%',
    'query': '恢复的效力你知道是什么意思啊'}}},
 'size': 20,
 'stored_fields': ['_source']}

# 字典数据的查询：
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "entity_dict.保险产品.keyword": "Baoxianchanpin"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 20,
  "sort": [],
  "aggs": {}
}

查询结果： 
{'_shards': {'failed': 0, 'skipped': 0, 'successful': 1, 'total': 1},
 'hits': {'hits': [{'_id': 'AWeGt5vtoVE-QSpZ16D3',
                    '_index': 't7_site_web1_ai_150_faq_20181207_110019',
                    '_score': 0.2876821,
                    '_source': {'answer': '理赔',
                                'entity_dict': {'保险产品': 'Baoxianchanpin',
                                                '恶性肿瘤': 'Jibing'},
                                'query_question': '生物公司身故保险金如何理赔',
                                'question': '保险产品恶性肿瘤如何理赔'},
                    '_type': '180'}],
          'max_score': 0.2876821,
          'total': 1},
 'timed_out': False,
 'took': 0}


