
{
  "query": {
    "match": {
      "question": {
        "query": "怎么充值",
        "type": "phrase",
        "fuzziness": 2
      }
    }
  }
}

模糊查询：
{
  "query": {
    "fuzzy": {
      "question": {
        "value": "怎么充值",
        "boost": 1,
        "fuzziness": 2,
        "prefix_length": 0,
        "max_expansions": 5
      }
    }
  }
}

精确匹配：
{
  "query": {
    "match_phrase": {
      "question": "怎么充值"
    }
  }
}


{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "default_field": "question",
            "query": "怎么充值"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 10,
  "sort": [],
  "aggs": {}
}

{
  "query": {
    "match": {
      "question": "怎么充值"
    }
  },
  "size": 20
}

二次排序：
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "question": "怎么充值"
        }
      },
      "script_score": {
        "script": {
          "inline": "_score*Math.log(2 + 4)"
        }
      }
    }
  }
}

排序：
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "question": "怎么充值"
        }
      },
      "script_score": {
        "script": {
          "params": {
            "a": 5,
            "b": 1.2
          },
          "inline": "params.a / Math.pow(params.b, 2)+_score"
        }
      }
    }
  }
}

# 其中我们在做索引的时候，希望能将所有的句子切分的更详细，以便更好的搜索，所以ik_max_word更多的用在做索引的时候，但是在搜索的时候，对于用户所输入的query(查询)词，我们可能更希望得比较准确的结果，例如，我们搜索“无花果”的时候，更希望是作为一个词进行查询，而不是切分为"无"，“花”，“果”三个词进行结果的召回，因此ik_smart更加常用语对于输入词的分析。
比如新建索引时用的分词器是`ik_max_word`,在查询时候，可以指定分词器为`ik_smart`：
{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "default_field": "question",
            "query": "你认为华兴的业绩如何",
            "analyzer": "ik_smart"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 10,
  "sort": [],
  "aggs": {}
}

# long类型数据的查询：
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "price": 20
        }
      }
    }
  }
}

列表数据的查询：
faq_ids字段是一个object对象，确切来说是一个列表，如："faq_ids": ["faq_6783","faq_6783"]
查询faq_ids字段中，存在值‘faq_6783’：
{'aggs': {},
 'from': 0,
 'query': {'bool': {'must': [{'term': {'faq_ids.keyword': 'faq_6783'}}],
                    'must_not': [],
                    'should': []}},
 'size': 10,
 'sort': []}

查询faq_ids字段中，存在值‘faq_6783’或‘faq_6384’：
{'aggs': {},
 'from': 0,
 'query': {'bool': {'must': [],
                    'must_not': [],
                    'should': [{'term': {'faq_ids.keyword': 'faq_6783'}},
                               {'term': {'faq_ids.keyword': 'faq_6784'}}]}},
 'size': 10,
 'sort': []}



其他：
"aggs" : {
    "max_price": {
        "max": {
            "script": {
                "lang": "groovy",
                "inline": "_score"
            }
        }
    }
}
在Elasticsearch 5.x, 启动的时候会报下面的警告：
[WARN ][o.e.d.s.g.GroovyScriptEngineService] [groovy] scripts are deprecated, use [painless] scripts instead
正确用法是:
"aggs" : {
    "max_price": {
        "max": {
            "script": {
                "lang": "painless",
                "inline": "_score"
            }
        }
    }
}

{
  "query": {
    "function_score": {
      "query": {
        "match_phrase": {
          "question": "出单"
        }
      },
      "boost": "5",
      "random_score": {},  # 随机搜索，每次的结果并不一致
      "boost_mode": "multiply"
    }
  }
}


# match_phrase 短语匹配查询，它匹配相对顺序一致的所有指定词语； 可能是因为“未成年人”是单个词语，所以搜索不到"未成年人身故赔付"；这个时候可以使用
# 可以使用 match_phrase 的一种特殊形式， match_phrase_prefix 查询：
# 这种查询的行为与 match_phrase 查询一致，不同的是它将查询字符串的最后一个词作为前缀使用
{
  "size": 100,
  "query": {
    "bool": {
      "should": [
        {
          "match_phrase": {
            "query_question": {
              "boost": 3,
              "query": "未成年人"
            }
          }
        },
        {
          "match_phrase_prefix": {
            "query_question": {
              "boost": 3,
              "query": "未成年人"
            }
          }
        }
      ]
    }
  }
}


elasticsearch in 语句
SQL语句示例
select * from table where t_id in (1,2,3,4)
对应es查询语句
GET /index/type/_search
{
  "query": {
    "terms": {
      "t_id": [  1,2,3,4      ]
    }
  }

# 精确搜索某个字段：
{'aggs': {},
 'from': 0,
 'query': {'bool': {'must': [{'term': {'标准模板.keyword': '定义'}}],
                    'must_not': [],
                    'should': [{'term': {'必选实体.keyword': 'Baoxianchanpin'}},
                               {'term': {'可选实体.keyword': 'Baoxianchanpin'}}]}},
 'size': 1,
 'sort': []}

 # 带权重，精确搜索某个字段
{'aggs': {},
 'from': 0,
 'query': {'bool': {'must': [{'term': {'标准模板.keyword': '定义'}}],
                    'must_not': [],
                    'should': [{'term': {'必选实体.keyword': {'boost': 3,
                                                          'term': 'Baoxianchanpin'}}}]}},
 'size': 10,
 'sort': []}



    {
        "query" : {
            "match_all" : {}
        },
        "facets" : {
            "stat1" : {
                "statistical" : {
                    "script" : "doc['title'].value.length()
                    //"script" : "_source.title.length() //ALTERNATIVE which isn't cached
                }
            }
        }
    }



{
    "query" : {}
            "match_all" : {}
        },
   "aggs": {
      "必选实体": {
         "terms": {
            "script": "_source.必选实体.length()",
            "lang": "groovy",
            "params": {}
         }
      }
   }
}

# 空值查询
curl -X POST "localhost:9200/my_index/posts/_bulk" -H 'Content-Type: application/json' -d'
{ "index": { "_id": "1"              }}
{ "tags" : ["search"]                }
{ "index": { "_id": "2"              }}
{ "tags" : ["search", "open_source"] }
{ "index": { "_id": "3"              }}
{ "other_field" : "some data"        }
{ "index": { "_id": "4"              }}
{ "tags" : null                      }
{ "index": { "_id": "5"              }}
{ "tags" : ["search", null]          }
{ "index": { "_id": "6"              }}
{ "tags" : ""          }
{ "index": { "_id": "7"              }}
{ "tags" : []          }
'

# 非空字段， is not null
curl -X GET "localhost:9200/my_index/posts/_search" -H 'Content-Type: application/json' -d'
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "exists" : { "field" : "tags" }
            }
        }
    }
}
'
# 查询结果有4个，_id为：1,2,5,6；这个结果包括tags字段为空字符串的；

# 若希望查询结果中不包括，tags字段为空字符串的；则需要通过下面的方法实现：
curl -X GET "localhost:9200/my_index/posts/_search" -H 'Content-Type: application/json' -d'
{
     "query": {"bool": {"must": [{
                                     "constant_score": {
                                         "filter": {
                                             "exists": {
                                                 "field": "tags"
                                             }
                                         }
                                     }
                                 }
                                 ],
                        "must_not": [
                            {
                              "term": {
                                "tags.keyword": ""
                              }
                            }
                        ],
                        "should": []}},
     "size": 10,
     "sort": []
}'

# 多字段搜索：
curl -XPOST "http://192.168.3.105:9200/all_baoxian_intent_20180723_160904/_search" -H 'Content-Type: application/json' -d'
{
  "query": {
    "multi_match": {
      "query": "Baoxianchanpin",
      "fields": [
        "必选实体.keyword",
        "可选实体.keyword"
      ]
    }
  }
}'

# 先根据分数排序，再根据字段长度排序
{
  "size": 20,
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    },
    {
      "_script": {
        "script": "doc['query_question.keyword'].value.length()",
        "type": "number",
        "order": "desc"
      }
    }
  ],
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "intent.keyword": {
              "boost": 0.001,
              "term": "限制_投保_地点"
            }
          }
        },
        {
          "match": {
            "query_question": "是否所有地区的客户均可投保？"
          }
        }
      ]
    }
  }
}
