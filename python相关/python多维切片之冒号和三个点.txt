python 多维切片之冒号和三个点

举个例子先建立一个5x5的二维数组 
 In [1]: import numpy as np

In [2]: a = np.arange(25).reshape((5,5))

In [3]: print(a)
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]

多维的切片是按照各个维度分别取 
比如
In [4]: print(a[1:3,2:5])
[[ 7  8  9]
 [12 13 14]]

这里就分别输出第一维的2-3和第二维的3-5（索引从0开始）。 
 In [4]: print(a[1:3,2:5])
[[ 7  8  9]
 [12 13 14]]

这里是行取全部，列取第3-5。 

 In [6]: print(a[:, None])
[[[ 0  1  2  3  4]]

 [[ 5  6  7  8  9]]

 [[10 11 12 13 14]]

 [[15 16 17 18 19]]

 [[20 21 22 23 24]]]

In [7]: print(a[:, None].shape)
(5, 1, 5)

这里应该是大家最疑惑的地方了，为什么列的参数改成None，输出的shape都变了，
这里大家要知道，None代表新增加一个维度，它有一个别称叫newaxis，大家可以输出一下numpy.newaxis就知道了，
那么这个别称应该顾名思义了吧。那么为什么是5x1x5，而不是5x5x1呢，
那是因为你在第二维上用了None，你如果在第三维上用就会变成5x5x1了，不信你看
In [8]: print(a[:,:, None].shape)
(5, 5, 1)

这下大家应该明白了吧。就是说None放在哪一维，就会在哪一维上出现新的维度。 
再看个更奇葩的
In [9]: print(a[..., None].shape)
(5, 5, 1)

三个点是什么鬼，Matlab里面这不是换行的操作么，但这里不是，
它是省略所有的冒号来用省略号代替,大家看这个a[:, :, None]和a[…, None]的输出是一样的，
就是因为…代替了前面两个冒号。这下应该清楚了。
至于三维以上的，那跟二维是一模一样啊。
