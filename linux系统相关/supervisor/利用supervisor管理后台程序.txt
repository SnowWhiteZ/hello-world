
Linux的后台进程运行有好几种方法，例如nohup，screen等，但是，如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。

supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。

安装supervisor

Debian / Ubuntu可以直接通过apt安装：

# apt-get install supervisor

然后，给我们自己开发的应用程序编写一个配置文件，让supervisor来管理它。
每个进程的配置文件都可以单独分拆，放在/etc/supervisor/conf.d/目录下，以.conf作为扩展名，例如，app.conf定义了一个gunicorn的进程：

[program:app]
command=/usr/bin/gunicorn -w 1 wsgiapp:application
directory=/srv/www
user=www-data
其中，进程app定义在[program:app]中，command是命令，directory是进程的当前目录，user是进程运行的用户身份。

重启supervisor，让配置文件生效，然后运行命令supervisorctl启动进程：
# supervisorctl start app

# 更新新的配置到supervisord (会将新写的配置文件直接start，对于旧的已经在运行的不会重启)   
ubuntu@10-13-70-173:~/qbzz$ sudo supervisorctl update

# 重新启动配置中的所有程序（对现有运行的程序会重启一次）
supervisorctl reload  

# supervisord 添加配置 而 不重启所有进程：
一般不是严格的环境下的时候，我们在添加了supervisord 新的配置之后，会使用 supervisorctl reload进行配置更新，但是这样一来，所有过去的进程也会重新load一次。
经过发现，我们可以使用supervisorctl reread，然后supervisorctl update，这样就会在不打扰过去配置的基础上新增我们的需求。

停止进程 (app=你配置中写的程序名称)：
# supervisorctl stop app

停止全部进程：
supervisorctl stop all  

supervisorctl stop programxxx   停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon
supervisorctl start programxxx  启动某个进程
supervisorctl restart programxxx    重启某个进程
supervisorctl stop groupworker  重启所有属于名为groupworker这个分组的进程(start,restart同理)
supervisorctl stop all  停止全部进程，注：start、restart、stop都不会载入最新的配置文件
supervisorctl reload    载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程
supervisorctl update    根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。注意：显示用stop停止掉的进程，用reload或者update都不会自动重启

注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。

如果要在命令行中使用变量，就需要自己先编写一个shell脚本：

#!/bin/sh
/usr/bin/gunicorn -w `grep -c ^processor /proc/cpuinfo` wsgiapp:application
然后，加上x权限，再把command指向该shell脚本即可。

实例：
第一步：编写conf文件，如tornado.conf
gswewf@gswewf-pc:/etc/supervisor/conf.d$ sudo vim tornado.conf

[group:tornadoes]
programs=tornado-8000

[program:tornado-8000]
# command=/home/web1/venv_demo/bin/python /home/web1/demo/main.py 
command=/usr/bin/python3 /home/gswewf/yhb/tornado_server.py
# directory=/home/web1/demo/
directory=/home/gswewf/yhb/
# user=web1
user=gswewf
startretries=10               ; 启动失败时的最多重试次数
autostart=true                    ; 程序是否随supervisor启动而启动                
autorestart=true                  ;程序停止时，是否自动重启 
redirect_stderr=true          ; 重定向stderr到stdout
stdout_logfile=/home/gswewf/yhb/log/tornado.log
stderr_logfile=/home/gswewf/yhb/log/tornado.log
loglevel=info


; 管理单个进程的配置，可创建多个，下面是所有可能的配置选项
;[program:theprogramname]
;command=/bin/cat              ; 启动进程的命令 使用相对路径，可以加参数
;process_name=%(program_name)s ; 进程名称 表达式 (默认 %(program_name)s)
;numprocs=1                    ; 进程数目 (def 1)
;directory=/tmp                ; 执行命令所在的目录 (def no cwd)
;umask=022                     ; 进程默认权限 (default None)
;priority=999                  ; 进程启动相对优先权 (default 999)
;autostart=true                ; 跟随supervisor启动时启动 (default: true)
;autorestart=unexpected        ; 计划启动 (default: unexpected)
;startsecs=1                   ; 延时启动 (def. 1)
;startretries=3                ; 最多连续启动失败 (default 3)
;exitcodes=0,2                 ; 进程结束代码 (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; 最长结束等待时间，否则使用 SIGKILL (default 10)
;stopasgroup=false             ; 是否想UNIX进程组发送结束信号 (default false)
;killasgroup=false             ; SIGKILL UNIX 进程组 (def false)
;user=chrism                   ; 设置启动此程序的用户
;redirect_stderr=true          ; 重定向程序的标准错误到标准输出 (default false)
;stdout_logfile=/a/path        ; 标准输出的日志路径, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; 日志文件最大值，否则循环写入 (default 50MB)
;stdout_logfile_backups=10     ; 标准输出日志备份数目 (default 10)
;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; 标准错误输出日志路径, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; 日志文件最大值，否则循环写入 (default 50MB)
;stderr_logfile_backups=10     ; 标准错误日志备份数目 (default 10)
;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A="1",B="2"       ; 进程附加环境 (def no adds)
;serverurl=AUTO                ; override serverurl computation (childutils)


第二步：启动
gswewf@gswewf-pc:~$ sudo supervisorctl start tornado-8000
unix:///var/run/supervisor.sock refused connection
这样启动会报错；改用下面的
gswewf@gswewf-pc:~$ sudo supervisord -c /etc/supervisor/supervisord.conf
Unlinking stale socket /var/run/supervisor.sock
gswewf@gswewf-pc:~$ sudo supervisorctl -c /etc/supervisor/supervisord.conf
unix:///var/run/supervisor.sock no such file
supervisor> exit

或者通过下面方法启动：
gswewf@gswewf-pc:~/yhb$ sudo supervisorctl start tornadoes:tornado-8000

或者通过下面方法启动（关闭supervisord后，上面两种方法启动都无效）：
gswewf@gswewf-pc:~$ sudo /etc/init.d/supervisor start


第三步：关闭
gswewf@gswewf-pc:~$ sudo supervisorctl stop tornado-8000
tornado-8000: ERROR (no such process)
会报错，改用下面的：
gswewf@gswewf-pc:~$ sudo supervisorctl stop all
tornadoes:tornado-8000: stopped

或者：
gswewf@gswewf-pc:~$ sudo supervisorctl stop tornadoes:tornado-8000
tornadoes:tornado-8000: stopped

gswewf@gswewf-pc:~$ sudo supervisorctl stop all
tornadoes:tornado-8000: stopped

# sudo supervisorctl stop all 仅仅是结束了所有的tornadoes；并不能结束supervisord的进程
gswewf@gswewf-pc:~$ ps -aux|grep supervi
root     16781  0.0  0.1  61128 20580 ?        Ss   16:15   0:00 /usr/bin/python /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf
gswewf   17321  0.0  0.0  14520   996 pts/2    S+   16:32   0:00 grep supervi

# 若需要结束supervisord的进程，只能是关闭supervisord
gswewf@gswewf-pc:~$ sudo supervisorctl shutdown
Shut down

# 查看supervisor状况：
root@10-13-101-154:~# supervisorctl status
tornadoes:tornado-8000           STOPPED    May 08 07:09 PM

使用easy_install安装的supervisor的默认sock文件 会被定义在/tmp下面 而apt-get会在/var/run下面. 
鉴于apt-get会出现各种问题 这里建议使用easy_install或是pip安装 supervisor.

如果修改了 /etc/supervisord.conf ,,需要执行 supervisorctl reload 来重新加载配置文件，否则会感觉没有生效

# 重新加载时候，有时候会报错：
zy@ubuntu:~/yhb$ supervisorctl reload /etc/supervisor/conf.d/tornado.conf
error: <class 'socket.error'>, [Errno 13] Permission denied: file: /usr/lib/python2.7/socket.py line: 228

# 解决方法是采用root用户来运行即可：
zy@ubuntu:~/yhb$ sudo supervisorctl reload /etc/supervisor/conf.d/tornado.conf
Restarted supervisord

有时候会报错：
FATAL      Exited too quickly (process log may have details)

可能是配置有问题，command写得有问题 
command=/usr/bin/python3 /home/gswewf/yhb/tornado_server.py

可能是/home/gswewf/yhb/tornado_server.py没加执行环境 
第一行加上#!/usr/bin/python3 

报‘Exited too quickly (process log may have details)’错误，也有可能是启动程序过慢造成不停地重启失败的，
在启动程序中加上一句停止时间，如：“sleep 3”即可

也有可能是程序已经在其他地方被人为启动了，导致端口占用，报错：
elasticsearch-head               BACKOFF   Exited too quickly (process log may have details)
这个时候关掉人为占用，重启对应守护进程即可，如：
gswewf@gswewf-pc:/etc/supervisor/conf.d$ sudo supervisorctl restart elasticsearch-head


另外命令不能把终端输出信息屏蔽掉
command=/bin/bash /usr/local/elasticsearch-5.3.0/bin/elasticsearch > /dev/null 2>&1 &   # 错误写法
command=/bin/bash /usr/local/elasticsearch-5.3.0/bin/elasticsearch   # 正确写法

故：“command=/bin/bash /usr/local/neo4j-community-3.1.1/bin/neo4j start “写是错误的；
应该写成： ” command=/bin/bash /usr/local/neo4j-community-3.1.1/bin/neo4j console “
因为“command=/bin/bash /usr/local/neo4j-community-3.1.1/bin/neo4j start “这样运行时，终端并没有什么输出信息；

单独在shell运行elasticsearch正常，但用supervisord运行elasticsearch报错：
max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]
需要更改默认的配置，如：
gswewf@gswewf-pc:/etc/supervisor/conf.d$ sudo vim elasticsearch.conf 
[supervisord]
minfds=65536
minprocs=32768  

[program:elasticsearch]
command=/usr/local/elasticsearch-5.3.0/bin/elasticsearch

需要注意的是，minfds的配置，与command不能在同一个选项下；

也可以通过web页面管理服务，配置如下：
#  HTTP 服务器，提供 web 管理界面
[inet_http_server]
# Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性
port=127.0.0.1:9001
# 登录管理后台的用户名
username=gswewf
# 登录管理后台的密码
password=123456

配置好后，重新加载
gswewf@gswewf-pc:/etc/supervisor/conf.d$ sudo /etc/init.d/supervisor reload
浏览器打开：http://127.0.0.1:9001/ ，输入用户名密码，即可看见程序运行情；

若允许非本地连接需更改：
port=127.0.0.1:9001        ; 这个是侦听的IP和端口，侦听所有IP用 :9001或*:9001。
改为：port=*:9001

问题：
root@942adfc9da78:/zheshang# supervisord -c /etc/supervisor/conf.d/tornado.conf
Error: .ini file does not include supervisord section
For help, use /usr/bin/supervisord -h
解决方法： 在`/etc/supervisor/conf.d/tornado.conf`文件中末尾添加一行：
[supervisord]

问题：
root@942adfc9da78:/zheshang# supervisorctl reload /etc/supervisor/conf.d/tornado.conf
error: <class 'socket.error'>, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 228
root@942adfc9da78:/zheshang# supervisorctl reread
error: <class 'socket.error'>, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 228

解决方法：
有可能是supervisor已经启动，不正常关闭导致的
ps ax | grep supervisord
记下pid号码，kill掉，然后supervisord启动，再service supervisorctl reload重启supervisorctl

root@942adfc9da78:/zheshang# supervisorctl reload /etc/supervisor/conf.d/tornado.conf
error: <class 'socket.error'>, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 228
# 启动supervisord
root@942adfc9da78:/zheshang# supervisord
/usr/lib/python2.7/dist-packages/supervisor/options.py:297: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a "-c" argument specifying an absolute path to a configuration file for improved security.
  'Supervisord is running as root and it is searching '
root@942adfc9da78:/zheshang# echo $?
0
root@942adfc9da78:/zheshang# supervisorctl reload /etc/supervisor/conf.d/tornado.conf
Restarted supervisord
root@942adfc9da78:/zheshang# echo $?
0


supervisord是服务端，是个deamon，supervisorctl是客户。

SUPERVISORD管理
/usr/bin/supervisord -c /etc/supervisord.conf
Supervisord安装完成后有两个可用的命令行supervisor和supervisorctl，命令使用解释如下：

supervisord，初始启动Supervisord，启动、管理配置中设置的进程。
supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:blogdemon]里配置的值，这个示例就是blogdemon。
supervisorctl start programxxx，启动某个进程
supervisorctl restart programxxx，重启某个进程
supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。
supervisorctl reload，载入最新的配置文件，并按新的配置启动、管理所有进程。

# 设置supervisor开机自启动
root@942adfc9da78:/etc/init.d# update-rc.d supervisor defaults
root@942adfc9da78:/etc/init.d# ps -aux|grep supervisor
root        57  0.0  0.0  15084  1024 ?        S+   02:28   0:00 grep --color=auto supervisor
root@942adfc9da78:/etc/init.d# /etc/init.d/supervisor start
Starting supervisor: Unlinking stale socket /var/run/supervisor.sock
supervisord.
root@942adfc9da78:/etc/init.d# echo $?
0

# 若某个配置文件更新了，仅仅是reload是不行的，需要更新配置到supervisord
# 更新新的配置到supervisord
root@a0a294877eab:# supervisorctl update
intent: stopped
intent: updated process group
# 重新启动配置中的所有程序
root@a0a294877eab:# supervisorctl reload
Restarted supervisord
